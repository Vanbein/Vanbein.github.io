<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vanbein&#39;s Blog</title>
    <description>This blog theme was designed by Frank Lin. I am updating this blog theme that meet my needs. Thanks to Github and Jekyll for the technical supports.</description>
    <link>http://vanbein.com/</link>
    <atom:link href="http://vanbein.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 30 Mar 2016 23:14:50 +0800</pubDate>
    <lastBuildDate>Wed, 30 Mar 2016 23:14:50 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>点亮我的 iOS开发技能树</title>
        <description>&lt;h2 id=&quot;ios-&quot;&gt;iOS 开发工程师职业图谱&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;说明&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;难度等级：R1-R5, 对应关系：零基础(R1)、简单(R2)、一般(R3)、困难(R4)、非常困难(R5)&lt;/li&gt;
  &lt;li&gt;达到程度：P1-P5, 对应关系：了解(P1)、熟悉(P2)、掌握(P3)、精通(P4)、专家(P5)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;职业图谱&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;通用基础(R3,P2)
    &lt;ul&gt;
      &lt;li&gt;理论基础(R4,P3)
        &lt;ul&gt;
          &lt;li&gt;数据结构(R4,P3)&lt;/li&gt;
          &lt;li&gt;算法(R4,P3)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;编程语言(R3,P2)
        &lt;ul&gt;
          &lt;li&gt;Objective-C(R3,P3)&lt;/li&gt;
          &lt;li&gt;Swift(R3,P2)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Objective-C基础(R3,P3)
    &lt;ul&gt;
      &lt;li&gt;Objective-C基本语法(R2,P4)
        &lt;ul&gt;
          &lt;li&gt;变量(R2,P4)&lt;/li&gt;
          &lt;li&gt;常量(R2,P4)&lt;/li&gt;
          &lt;li&gt;数据类型(R2,P4)&lt;/li&gt;
          &lt;li&gt;运算符和表达式(R2,P4)&lt;/li&gt;
          &lt;li&gt;判断(R2,P4)&lt;/li&gt;
          &lt;li&gt;循环(R2,P4)&lt;/li&gt;
          &lt;li&gt;Objective-C编码规范(R2,P4)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Objective-C语法进阶(R3,P3)
        &lt;ul&gt;
          &lt;li&gt;类和对象(R3,P3)&lt;/li&gt;
          &lt;li&gt;属性和变量(R3,P3)&lt;/li&gt;
          &lt;li&gt;继承(R3,P3)&lt;/li&gt;
          &lt;li&gt;多态(R3,P3)&lt;/li&gt;
          &lt;li&gt;动态绑定(R3,P3)&lt;/li&gt;
          &lt;li&gt;block块(R3,P3)&lt;/li&gt;
          &lt;li&gt;异常处理(R3,P3)&lt;/li&gt;
          &lt;li&gt;Category类别(R3,P3)&lt;/li&gt;
          &lt;li&gt;Extension扩展(R3,P3)&lt;/li&gt;
          &lt;li&gt;Protocol协议 (R3,P3)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Objective-C高级语法(R4,P2)
        &lt;ul&gt;
          &lt;li&gt;KVC(R4,P2)&lt;/li&gt;
          &lt;li&gt;KVO(R4,P2)&lt;/li&gt;
          &lt;li&gt;Notification(R4,P2)&lt;/li&gt;
          &lt;li&gt;引用计数与ARC(R4,P2)&lt;/li&gt;
          &lt;li&gt;内存管理(R4,P4)&lt;/li&gt;
          &lt;li&gt;多线程(R4,P3)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Objective-C Foundation框架(R3,P3)
        &lt;ul&gt;
          &lt;li&gt;NSNumber(R3,P3)&lt;/li&gt;
          &lt;li&gt;NSString(R3,P4)&lt;/li&gt;
          &lt;li&gt;NSArray(R3,P4)&lt;/li&gt;
          &lt;li&gt;NSDictionary(R3,P4)&lt;/li&gt;
          &lt;li&gt;NSSet(R3,P2)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Swift基础(R2,P2)
    &lt;ul&gt;
      &lt;li&gt;Swift基本语法(R2,P2)
        &lt;ul&gt;
          &lt;li&gt;变量(R2,P2)&lt;/li&gt;
          &lt;li&gt;常量(R2,P2)&lt;/li&gt;
          &lt;li&gt;数据类型(R2,P2)&lt;/li&gt;
          &lt;li&gt;判断(R2,P2)&lt;/li&gt;
          &lt;li&gt;循环(R2,P2)&lt;/li&gt;
          &lt;li&gt;Swift编码规范(R2,P2)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Swift语法进阶(R3,P2)
        &lt;ul&gt;
          &lt;li&gt;Swift字符串(R3,P2)&lt;/li&gt;
          &lt;li&gt;数组(R3,P2)&lt;/li&gt;
          &lt;li&gt;字典(R3,P2)&lt;/li&gt;
          &lt;li&gt;元组(R3,P2)&lt;/li&gt;
          &lt;li&gt;函数(R3,P2)&lt;/li&gt;
          &lt;li&gt;可选型optionals(R3,P2)&lt;/li&gt;
          &lt;li&gt;枚举(R3,P2)&lt;/li&gt;
          &lt;li&gt;闭包 (R3,P2)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Swift高级语法(R4,P1)
        &lt;ul&gt;
          &lt;li&gt;Swift和Objective-C混合编程(R3,P1)&lt;/li&gt;
          &lt;li&gt;Swift源码(R5,P1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;iOS开发基础(R2,P3)
    &lt;ul&gt;
      &lt;li&gt;iOS基础(R2,P3)
        &lt;ul&gt;
          &lt;li&gt;iOS生命周期(R3,P3)&lt;/li&gt;
          &lt;li&gt;事件与消息(R3,P3)&lt;/li&gt;
          &lt;li&gt;模拟器(R2,P2)&lt;/li&gt;
          &lt;li&gt;真机调试(R2,P2)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;UI控件(R2,P4)
        &lt;ul&gt;
          &lt;li&gt;Button(R2,P4)&lt;/li&gt;
          &lt;li&gt;Label(R2,P4)&lt;/li&gt;
          &lt;li&gt;ImageView(R2,P4)&lt;/li&gt;
          &lt;li&gt;ScrollView(R2,P4)&lt;/li&gt;
          &lt;li&gt;TableView(R4,P4)&lt;/li&gt;
          &lt;li&gt;CollectionView(R4,P3)&lt;/li&gt;
          &lt;li&gt;自定义控件(R4,P2)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;界面布局(R3,P3)
        &lt;ul&gt;
          &lt;li&gt;代码布局(R3,P3)&lt;/li&gt;
          &lt;li&gt;nib/xib文件(R2,P3)&lt;/li&gt;
          &lt;li&gt;storyboard(R2,P3)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;iOS开发进阶(R3,P3)
    &lt;ul&gt;
      &lt;li&gt;动画效果(R3,P2)
        &lt;ul&gt;
          &lt;li&gt;UIView动画(R3,P2)&lt;/li&gt;
          &lt;li&gt;Core Animation(R3,P2)&lt;/li&gt;
          &lt;li&gt;第三方动画库pop(R3,P1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;多线程(R4,P4)
        &lt;ul&gt;
          &lt;li&gt;NSThread(R4,P3)&lt;/li&gt;
          &lt;li&gt;NSOperationQueue(R4,P4)&lt;/li&gt;
          &lt;li&gt;GCD(R3,P4)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;数据存储(R3,P4)
        &lt;ul&gt;
          &lt;li&gt;NSUserDefault(R3,P4)&lt;/li&gt;
          &lt;li&gt;SQLite(R3,P2)&lt;/li&gt;
          &lt;li&gt;CoreData(R3,P4)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;数据处理(R3,P3)
        &lt;ul&gt;
          &lt;li&gt;Model(R4,P3)&lt;/li&gt;
          &lt;li&gt;XML解析(R3,P4)&lt;/li&gt;
          &lt;li&gt;JSON解析(R3,P4)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;物理特性(R3,P1)
        &lt;ul&gt;
          &lt;li&gt;各类传感器(R3,P1)&lt;/li&gt;
          &lt;li&gt;摄像头(R3,P1)&lt;/li&gt;
          &lt;li&gt;指纹识别(R3,P1)&lt;/li&gt;
          &lt;li&gt;Force Touch(R3,P1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;网络与通信(R3,P3)
        &lt;ul&gt;
          &lt;li&gt;Http(R3,P4)&lt;/li&gt;
          &lt;li&gt;Socket(R3,P2)&lt;/li&gt;
          &lt;li&gt;SOAP(R3,P2)&lt;/li&gt;
          &lt;li&gt;抓包(R4,P1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;屏幕适配(R3,P3)
        &lt;ul&gt;
          &lt;li&gt;代码适配(R3,P4)&lt;/li&gt;
          &lt;li&gt;Autoresizing(R2,P4)&lt;/li&gt;
          &lt;li&gt;AutoLayout(R3,P3)&lt;/li&gt;
          &lt;li&gt;Size Classes(R4,P2)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;其他(R3,P2)
        &lt;ul&gt;
          &lt;li&gt;多点触控(R3,P1)&lt;/li&gt;
          &lt;li&gt;手势识别(R3,P1)&lt;/li&gt;
          &lt;li&gt;传感器(R3,P1)&lt;/li&gt;
          &lt;li&gt;定位(R3,P3)&lt;/li&gt;
          &lt;li&gt;电源管理(R3,P1)&lt;/li&gt;
          &lt;li&gt;消息推送(R3,P3)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;iOS高级开发(R4,P2)
    &lt;ul&gt;
      &lt;li&gt;iOS架构(R4，P2)
        &lt;ul&gt;
          &lt;li&gt;MVC(R3,P2)&lt;/li&gt;
          &lt;li&gt;MVVM(R4,P1)&lt;/li&gt;
          &lt;li&gt;设计模式(R5,P2)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;第三方框架(R3,P2)
        &lt;ul&gt;
          &lt;li&gt;AFNetworking(R3,P3)&lt;/li&gt;
          &lt;li&gt;SDWebImage(R3,P2)&lt;/li&gt;
          &lt;li&gt;MBProgressHUD(R3,P2)&lt;/li&gt;
          &lt;li&gt;Masonry(R3,P1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;第三方SDK(R3,P2)
        &lt;ul&gt;
          &lt;li&gt;分享(R3,P3)&lt;/li&gt;
          &lt;li&gt;第三方登录(R4,P2)&lt;/li&gt;
          &lt;li&gt;短信验证码(R3,P3)&lt;/li&gt;
          &lt;li&gt;其他各类API(R3,P2)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;开发效率(R3,P3)
    &lt;ul&gt;
      &lt;li&gt;IDE(R2,P4)
        &lt;ul&gt;
          &lt;li&gt;Xcode(R2,P4)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;插件(R2,P1)
        &lt;ul&gt;
          &lt;li&gt;Alcatraz(R2,P1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;包管理(R2,P3)
        &lt;ul&gt;
          &lt;li&gt;Cocoapods&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;版本控制(R2,P3)
        &lt;ul&gt;
          &lt;li&gt;Git(R2,P3)&lt;/li&gt;
          &lt;li&gt;SVN(R2,P3)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;应用内测与分发(R2,P1)
        &lt;ul&gt;
          &lt;li&gt;Pre.im(R2,P1)&lt;/li&gt;
          &lt;li&gt;蒲公英(R2,P1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;后台服务(R2,P1)
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://www.bmob.cn/&quot;&gt;Bmob&lt;/a&gt;(R2,P1)&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://www.parse.com/&quot;&gt;Parse&lt;/a&gt; (R2,P1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 25 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://vanbein.com/posts/ios%E9%AB%98%E7%BA%A7/iOS-Skillmap</link>
        <guid isPermaLink="true">http://vanbein.com/posts/ios%E9%AB%98%E7%BA%A7/iOS-Skillmap</guid>
        
        <category>iOS</category>
        
        <category>SkillMap</category>
        
        
        <category>ios高级</category>
        
      </item>
    
      <item>
        <title>iOS开发中一些常用的小知识或技巧</title>
        <description>&lt;p&gt;true本文将记录在学习iOS开发过程中所学到的小知识点，以及一些技巧，会保持更新。&lt;/p&gt;

&lt;p&gt;###1. 将图片设置为圆形，或给button，label等设置圆角&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;UIImageView *testImageView = [[UIImageView alloc] initWithFrame:CGRectMake(10, 10, 40, 40)] ;
// 设置圆角半径，一般要求图片是正方形，
// 若不是则需要将半径设置为宽和高比较大的值的一半即可
testImageView.layer.cornerRadius = self.testImageView.frame.size.width / 2 ;
testImageView.layer.masksToBounds = YES ; // 边界是否允许截取
//
// button label等设置圆角都是同样的方法
UIButton *testButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
testButton.frame = CGRectMake(50, 80, 80, 40);
testButton.layer.cornerRadius = 5; 
testButton.layer.masksToBounds = YES;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果控件是在 stroyBoard 中，可以 &lt;code&gt;User Defined Runtime Attributes
&lt;/code&gt;中按照下面一样设置即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/12/cornerRadius.png&quot; alt=&quot;storyBoard设置圆角&quot; title=&quot;设置圆角&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###2. 根据内容计算高度，宽度&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;内容的自适应高度方法&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;@param CGSize 规定文本显示的最大范围, 动态高度就设置为高度不限并固定宽度，若是动态宽度则设置宽度不限，高度固定&lt;/li&gt;
      &lt;li&gt;@param options 按照何种设置来计算范围&lt;/li&gt;
      &lt;li&gt;@param attributes 文本内容的一些属性,例如字体大小,字体类型等  (字体不一样,高度也不一样)&lt;/li&gt;
      &lt;li&gt;@parma context 上下文 可以规定一些其他的设置 但是一般都是nil&lt;br /&gt;
   */    &lt;br /&gt;
  // 枚举值中的 “ | “  意思是要满足所有的枚举值设置.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;//例子
NSString *contentString = @&quot;String! String!&quot; ; //目标字符串
CGRect rect = [contentString boundingRectWithSize:CGSizeMake(tableView.bounds.size.width, MAXFLOAT) options:NSStringDrawingUsesLineFragmentOrigin | NSStringDrawingUsesFontLeading attributes:@{NSFontAttributeName :[UIFont systemFontOfSize:15]} context:nil] ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###3. 隐藏状态栏 修改状态栏风格&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;-(UIStatusBarStyle)preferredStatusBarStyle 
{ 
    return UIStatusBarStyleLightContent;  // 暗背景色时使用
} 
// 是否隐藏状态栏
- (BOOL)prefersStatusBarHidden 
{ 
    return YES; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###4. 当有多个导航控制器时,一次设置多个导航控制器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UINavigationBar *navBar = [UINavigationBar appearance] ;
// 所有导航条颜色都会改变 -- 一键设置
//navBar.barTintColor = [UIColor yellowColor] ;
[navBar setBackgroundImage:[UIImage imageNamed:@&quot;bg_nav.png&quot;] forBarMetrics:UIBarMetricsDefault] ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###5. Objective-C语法简写&lt;/p&gt;

&lt;p&gt;####(1). @&lt;br /&gt;
+ @() 代表NSNumber类型&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;@1; 等价于 [NSNumber numberWithInt:1];   
@(&#39;c&#39;); 等价于 [NSNumber numberWithChar:&#39;c&#39;]; 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;@[] 代表数组NSArray类型&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;@[@&quot;1&quot;,@&quot;2&quot;,@&quot;3&quot;]; //等价于 
[NSArray arrayWithObjects:@&quot;1&quot;,@&quot;2&quot;,@&quot;3&quot;, nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;@{}代表字典NSDictionary类型&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;@{@&quot;456&quot;:@&quot;123&quot;}; //等价于 
[NSDictionary dictionaryWithObject:@&quot;123&quot; forKey:@&quot;456&quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####(2).方法声明&lt;br /&gt;
* 返回值如果不写括号，编译器默认是id类型:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-sendMessage;  //等价于
-(id)sendMessage;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;参数如果不写类型默认也是id类型&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;-(void)sendMessage:msg; //等价于
-(void)sendMessage:(id)msg;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;有多参数时方法名和参数提示语可以为空&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;-(void):msg1 :msg2; // 不建议这样简写，代码可读性降低
-(void)sendMessage:(id)msg1 message2:(id)msg2; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####(3).结构体&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CGRect rect = {1, 2};  //等价于
CGRect rect = {1, 2, 0, 0};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####(4).三元条件表达式（针对字符串）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString *string = inputString ?: @&quot;default&quot;; // 等价于
NSString *string = inputString ? inputString : @&quot;default&quot;; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####(5).小括号内联复合表达式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RETURN_VALUE_RECEIVER = {( 
// Do whatever you want
 RETURN_VALUE;  // 返回值
)};
//
//so 我们可以引申为以下这种写法：
UIView *view = ({
        UIView *view = [[UIView alloc] initWithFrame:self.view.bounds];
        view.backgroundColor = [UIColor redColor];
        view.alpha = 0.8f;
        view;
    });
    [self.view addSubview:view];
//这样使得代码量增大时层次仍然能比较明确。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###6. UIImage与字符串互转&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//图片转字符串  
-(NSString *)UIImageToBase64Str:(UIImage *) image  
{  
    NSData *data = UIImageJPEGRepresentation(image, 1.0f);  
    NSString *encodedImageStr = [data base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];  
    return encodedImageStr;  
}
//
//字符串转图片  
-(UIImage *)Base64StrToUIImage:(NSString *)_encodedImageStr  
{  
    NSData *_decodedImageData   = [[NSData alloc] initWithBase64Encoding:_encodedImageStr];  
    UIImage *_decodedImage      = [UIImage imageWithData:_decodedImageData];  
    return _decodedImage;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###7. 根据汉字字符串 获取该字符串的拼音 然后取得首字母&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;//第一种方法：先将汉字转换为 拼音 再获取首字母
//获取拼音首字母(传入汉字字符串, 返回大写拼音首字母)
/*
- (NSString *)firstCharactor:(NSString *)aString
{
    //转成了可变字符串
    NSMutableString *str = [NSMutableString stringWithString:aString];
    //先转换为带声调的拼音
    CFStringTransform((CFMutableStringRef)str,NULL, kCFStringTransformMandarinLatin,NO);
    //再转换为不带声调的拼音
    CFStringTransform((CFMutableStringRef)str,NULL, kCFStringTransformStripDiacritics,NO);
    //转化为大写拼音 
    NSString *pinYin = [str capitalizedString];
    //获取并返回首字母
    return [pinYin substringToIndex:1];
}
//
//第二种方法：
NSString *string = @&quot;简书&quot; ;
if ([string length])
{
    NSMutableString *mutableString = [NSMutableString stringWithString:string] ;
    /**
     *  由于此方法是在coreFoundation框架下,
     *  而我们平时所使用的类型都是Foundation框架下的,所以需要转换类型.
     *
     *  @param string#&amp;gt;    string 所需要转换的原字符#&amp;gt;
     *  @param range#&amp;gt;     range 所需要转换字符的范围.
     *      如果为0或者是NULL意思是所有字符都转换#&amp;gt;
     *  @param transform#&amp;gt; transform 转换方式#&amp;gt;
     *  @param reverse#&amp;gt;   reverse 如果为YES,返回原字符串;
     *      如果为NO,返回转换之后的字符串#&amp;gt;
     *
     *  @return return value description
     */
    // 将所有非英文的字符转换为拉丁字母,并且带声调和重音标识
    // __bridge :只改变当前对象的类型,但是不改变对象内存的管理权限
    CFStringTransform((__bridge CFMutableStringRef)mutableString , 0,kCFStringTransformToLatin , NO) ;
    // 去掉声调
    CFStringTransform((__bridge CFMutableStringRef)mutableString , 0,kCFStringTransformStripDiacritics , NO) ;
    // 每个单词的首字母大写 后再截取字符串
    NSString *str = [[mutableString capitalizedString] substringToIndex:1];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若需要得到汉字字符串的首字母缩写，只需对上述方法稍作修改即可。&lt;/p&gt;

</description>
        <pubDate>Fri, 18 Mar 2016 23:52:02 +0800</pubDate>
        <link>http://vanbein.com/posts/tips/chang-yong-de-xiao-ji-qiao</link>
        <guid isPermaLink="true">http://vanbein.com/posts/tips/chang-yong-de-xiao-ji-qiao</guid>
        
        <category>iOS</category>
        
        <category>Tip</category>
        
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>2016-3-16 笔记</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;一、随机生成一种颜色&lt;/h3&gt;

&lt;p&gt;我们可以使用标准库中的&lt;code&gt;drand48()&lt;/code&gt;函数，它会随机生成一个0.0-1.0之间的double，因此我们只需要随机生成R, G, B三个值最后用UIColor的&lt;code&gt;colorWithRed:green:blue:alpha&lt;/code&gt;方法创建UIColor，即可。&lt;/p&gt;

&lt;p&gt;需要注意的是，&lt;code&gt;drand48&lt;/code&gt;函数需要使用&lt;code&gt;srand48&lt;/code&gt;来初始化随机数种子，示例代码如下：&lt;br /&gt;
&lt;code&gt;objc
- (UIColor *)randomColor{    
    static BOOL seeded = NO;
    if (!seeded) {
        seeded = YES;
        srand48(time(0));
    }
    CGFloat r = (CGFloat)drand48();
    CGFloat g = (CGFloat)drand48();
    CGFloat b = (CGFloat)drand48();
    return [UIColor colorWithRed:r green:g blue:b alpha:1.0];
}
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;demo的github地址：&lt;a href=&quot;https://github.com/Vanbein/RandomColor&quot;&gt;随机生成一个UIColor&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###二、待续&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Mar 2016 23:52:02 +0800</pubDate>
        <link>http://vanbein.com/posts/tips/2016-3-13-bi-ji</link>
        <guid isPermaLink="true">http://vanbein.com/posts/tips/2016-3-13-bi-ji</guid>
        
        <category>iOS</category>
        
        <category>Tip</category>
        
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>许巍 - 蓝莲花</title>
        <description>&lt;p&gt;许巍的歌，每一首都是人生，这首&lt;strong&gt;《蓝莲花》&lt;/strong&gt;更是无可替代的经典，每次听到歌曲开始的几句歌词，心情就会情不自禁的澎湃起伏，说是玄音缭绕也不为过。&lt;/p&gt;

&lt;p&gt;这首歌个歌词写得非常好，每次心情不好的的时候，听到后心情立刻变得舒畅起来：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;没有什么能够阻挡&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;你对自由的向往&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;天马行空的生涯&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;你的心了无牵挂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;穿过幽暗的岁月&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;也曾感到彷徨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;当你低头的瞬间&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;才发觉脚下的路&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;心中那自由的世界&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;如此的清澈高远&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;盛开着永不凋零&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;蓝莲花&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;（music）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;穿过幽暗的岁月&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;也曾感到彷徨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;当你低头的瞬间&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;才发觉脚下的路&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;穿过幽暗的岁月&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;也曾感到彷徨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;当你低头的瞬间&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;才发觉脚下的路&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;心中那自由地世界&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;如此的清澈高远&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;盛开着永不凋零&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;蓝莲花&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;（music）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;啦啦啦啦啦&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 15 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://vanbein.com/posts/media/blue-xuwei</link>
        <guid isPermaLink="true">http://vanbein.com/posts/media/blue-xuwei</guid>
        
        <category>许巍</category>
        
        
        <category>media</category>
        
      </item>
    
      <item>
        <title>这个Blog网站的搭建过程</title>
        <description>&lt;p&gt;之前我使用了Github + Octopress搭建了自己的blog，折腾一段时间后觉得可能使用Github + Jekyll 更好，碰巧又遇到了一个自己喜爱的主题，所以就果断的迁移了过来。这儿也非常感谢 &lt;a href=&quot;http://www.flinhong.com/&quot;&gt;林宏&lt;/a&gt; 开源的主题！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我是在 Mac 上进行搭建的，所以 Windows 或其他系统的电脑请忽视。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;github&quot;&gt;一、Github&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在 Github 上新建一个仓库(repository)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;登录 Github 后，新建 &lt;code&gt;Github repository&lt;/code&gt;。项目名称（Repository name）命名格式为 &lt;code&gt;username.github.io&lt;/code&gt; ，username 是你的 Github 用户名。例如我的用户名是 Vanbein，所以输入 &lt;code&gt;Vanbein.github.io&lt;/code&gt; 即可。点击 &lt;code&gt;Create repository&lt;/code&gt; 创建，创建后不用添加任何内容。&lt;/p&gt;

&lt;h3 id=&quot;jekyll-&quot;&gt;二、创建本地 Jekyll 库&lt;/h3&gt;

&lt;p&gt;如果没有 Jekyll ，可以执行下面的命令进行安装：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;$ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于我是直接使用了&lt;a href=&quot;http://www.flinhong.com/&quot;&gt;林宏Frank lin&lt;/a&gt; 提供的主题，所以只需要把主题文件 Clone 下来就行，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;$ git clone https://gitcafe.com/linhong/linhong.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;，clone 下来后非常重要的就是去看这个主题的源代码并做一些个人的修改，特别是 _config.yml 文件，之后把自己博客的markdown文件全部移到 &lt;code&gt;_posts&lt;/code&gt; 目录下基本上就完成了所有的迁移工作，以后我们新增 blog 也是放在这个文件夹下。&lt;/p&gt;

&lt;p&gt;再执行下面的命令，浏览器打开 http://localhost:4000 便可以看到新的主题&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;$ jekyll build 
$ jekyll serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，如果你是用了 bundle ,那么请使用下面的命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;$ bundle exec jekyll build 
$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;三、发布网站到 Github Pages&lt;/h3&gt;

&lt;p&gt;继续执行下面的命令，即可将我们的博客网站发布到 Github 上&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add origin https://github.com/username/username.github.io
$ git add .
$ git commit -m&quot;commit message&quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上传成功之后，稍等一下下，访问 http://username.github.io 就可以看到 Blog 网站已经生成了（将 username 换成你的 github 用户名）。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;四、自定义域名&lt;/h3&gt;

&lt;p&gt;使用 Github Pages 服务搭建好博客以后，默认的访问地址是 username.github.io 形式的二级域名。大家一定迫不及待的想换成自己的个性域名了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;购买域名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到各大域名购买网站购买自己心仪的域名，我是在 Godaddy 上购买的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;获取自己github二级域名的IP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以我的域名 vanbein.github.io 为例，输入以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dig vanbein.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在输出内容中找到 &lt;strong&gt;ANSWER SECTION&lt;/strong&gt; 一项，比如我的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;; ANSWER SECTION:
vanbein.github.io.	1668	IN	CNAME	github.map.fastly.net.
github.map.fastly.net.	151	IN	A	185.31.17.133
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到我的 IP 是 &lt;code&gt;185.31.17.133&lt;/code&gt; 。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;添加A记录&lt;br /&gt;
得到IP以后，需要到你的域名解析服务商处添加一个A记录，将你的域名解析成对应的IP。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;经过以上步骤，访问 vanbein.github.io 的地址就会自动跳转到自己的域名了。不过可能需要等一段时间才能生效。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;遇到的一些困难&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;首先真的非常感谢&lt;a href=&quot;http://www.flinhong.com/&quot;&gt;林宏&lt;/a&gt;的帮助&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;gitcafe-clone--jekyll-30-&quot;&gt;1. 从 gitcafe clone 下来的源码不适用于 jekyll 3.0 以上版本&lt;/h4&gt;

&lt;p&gt;当我 clone 下源码后，根据我自己我需求做了一下配置更改，然后通过 jekyll build 命令后发现居然没有生成每篇blog的静态文件，只有主页等几个主界面，每篇文章的 post 页面不存在，点进去就是 404 Error，折腾了好久也没搞定，于是去请教了主题的作者 林宏 ，经过一番耐心仔细的帮助后，觉得问题应该是出在 jekyll 升级到 3.0 的原因，所以我卸载了jekyll，重装了一个 jekyll 2.5.2 版本，然后就发现好使了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注下&lt;br /&gt;
卸载 jekyll，执行命令&lt;br /&gt;
$ gem uninstall jekyll  # 如果有多个版本，全部都要卸载&lt;br /&gt;
安装2.5.2版本的 jekyll，执行命令&lt;br /&gt;
$ gem install jekyll –version “=2.5.2”&lt;br /&gt;
如果安装提示 没权限，可以尝试执行下面的命令：&lt;br /&gt;
sudo gem install jekyll –version “=2.5.2”&lt;br /&gt;
如果还是不行，提示了 &lt;code&gt;Operation not permitted&lt;/code&gt;，那么执行&lt;br /&gt;
sudo gem install -n /usr/local/bin/ jekyll –version “=2.5.2”&lt;br /&gt;
最后，如果没必要，建议把 bundler 卸载了再重新装 jekyll，执行命令 &lt;code&gt;gem uninstall bundler&lt;/code&gt; 即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是，接下来的问题变成了，github 已经升级到 3.0，如果我要使用3.0，需要作出哪些配置调整呢？ 嗯，还在研究中，研究出来再贴出来结果吧&lt;/p&gt;

&lt;h3 id=&quot;github--jekyll-30&quot;&gt;Github 升级 Jekyll 3.0&lt;/h3&gt;

&lt;p&gt;这有寄篇关于Github升级Jekyll的文章，值得看看：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://platinhom.github.io/2016/02/04/update-github-rouge/&quot;&gt;Github升级Jekyll3.0-强制使用rouge语法高亮&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/upgrading/2-to-3/&quot;&gt;官方关于从2.x升级到3.0的说明&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 09 Mar 2016 23:52:02 +0800</pubDate>
        <link>http://vanbein.com/posts/jekyll/blog</link>
        <guid isPermaLink="true">http://vanbein.com/posts/jekyll/blog</guid>
        
        <category>Jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>2016-3-9 笔记</title>
        <description>&lt;h3 id=&quot;app-&quot;&gt;一、获得一款 APP 的所有图片资源&lt;/h3&gt;

&lt;p&gt;当我们想模仿一款app的时候，通过ipa包，可以拿到基本的图片，但是有一些个别的图片还是不能拿到的，可以通过一些工具插件来完成，推荐使用下面这款, github代码地址:&lt;a href=&quot;https://github.com/devcxm/iOS-Images-Extractor&quot;&gt;iOS-Images-Extractor&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;xcode-&quot;&gt;二、Xcode 查看谁改动的代码&lt;/h3&gt;

&lt;p&gt;如果我们源代码有版本控制，那么当程序出了问题或bug，找到问题代码所在行后，可以通过右键 - Show Blame for Line 查看是谁改动的代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/ShowBalmeForLine.png&quot; alt=&quot;Show Balme for Line&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/ShowBalme.png&quot; alt=&quot;Show Balme for Line&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;三、屏幕截图并保存&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;//snapshotImage 这个方法效率比较低，
- (UIImage *)snapshotImage {
    UIGraphicsBeginImageContextWithOptions(self.view.bounds.size, self.view.opaque, 0);
    [self.view.layer renderInContext:UIGraphicsGetCurrentContext()];
    UIImage *snap = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return snap;
}
//iOS 7上UIView上提供了drawViewHierarchyInRect:afterScreenUpdates:来截图，速度比renderInContext:快15倍。
- (UIImage *)snapshotImageAfterScreenUpdates:(BOOL)afterUpdates {
    if ([self respondsToSelector:@selector(drawViewHierarchyInRect:afterScreenUpdates:)]) {
        return [self snapshotImage];
    }
    UIGraphicsBeginImageContextWithOptions(self.view.bounds.size, self.view.opaque, 0);
    [self.view drawViewHierarchyInRect:self.view.bounds afterScreenUpdates:afterUpdates];
    UIImage *snap = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return snap;
}
//保存截图到相册
- (void)saveImageToPhotos:(UIImage *)image{
    UIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);
}
//状态回调
- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo{
    if (!error) {
        NSLog(@&quot;\n\n保存成功\n\n&quot;);
    } else {
        NSLog(@&quot;\n\n保存失败\n\n&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;图片高斯模糊，毛玻璃效果&lt;/h3&gt;

&lt;p&gt;详细请走传送门：&lt;a href=&quot;http://www.jianshu.com/p/6dd0eab888a6&quot;&gt;http://www.jianshu.com/p/6dd0eab888a6&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 09 Mar 2016 23:52:02 +0800</pubDate>
        <link>http://vanbein.com/posts/tips/2016-3-7-bi-ji</link>
        <guid isPermaLink="true">http://vanbein.com/posts/tips/2016-3-7-bi-ji</guid>
        
        <category>iOS</category>
        
        <category>Tip</category>
        
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>2016.3第一周知识点笔记</title>
        <description>&lt;h3 id=&quot;barbuttonitem-&quot;&gt;一、调整导航栏自定义的 BarButtonItem 到屏幕边侧的间距&lt;/h3&gt;

&lt;p&gt;比如我们导航栏右侧有两个自定义的按钮，那就可以通过以下代码调整他们之间的间隔&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;	UIButton *rightbutton1;
	UIButton *rightbutton2;
    UIBarButtonItem *backButton1 = [[UIBarButtonItem alloc] initWithCustomView:rightbutton1];
    UIBarButtonItem *backButton2 = [[UIBarButtonItem alloc] initWithCustomView:rightbutton2];
    //
    //调整 rightBarButtonItems 到屏幕右侧的间距
    UIBarButtonItem *rightNegativeSpacer = [[UIBarButtonItem alloc]
                                       initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace
                                       target:nil action:nil];
    rightNegativeSpacer.width = -1; 
    /**
     *  width为负数时，相当于 btn 向右移动 width 数值个像素，
     *  由于按钮本身和边界间距为 16 px，所以width设为 -1 时，间距正好调整为 15
     *  width为正数时，正好相反，相当于往左移动width数值个像素
     */
    UIBarButtonItem *rightNegativeSpacer2 = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace
                                            target:nil action:nil];
    rightNegativeSpacer2.width = 18; // rightButton1 和 rightButton2 的间隔默认为0
    //
    [self.navigationItem setRightBarButtonItems:[NSArray arrayWithObjects:rightNegativeSpacer, backButton1, rightNegativeSpacer2, backButton2, nil]];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;view--frame&quot;&gt;二、获得任意 view 相对于屏幕的 frame&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;    CGRect frame = [[UIApplication sharedApplication].keyWindow convertRect:CGRectMake(0, 0, targetView.frame.size.width, targetView.frame.size.height) fromView:targetView];
    NSLog(@&quot;\n\n targetView frame: x: %f   y: %f  \n\n width: %f   height: %f&quot;, frame.origin.x, frame.origin.y, frame.size.width, frame.size.height);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section&quot;&gt;三、通过颜色来生成一个纯色图片&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;- (UIImage *)imageFromColor:(UIColor *)color{
    CGRect rect = CGRectMake(0, 0, 100, 100);
    UIGraphicsBeginImageContext(rect.size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetFillColorWithColor(context, [color CGColor]);
    CGContextFillRect(context, rect);
    UIImage *img = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return img;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;uinavigationbar-&quot;&gt;四、设置 UINavigationBar 背景色，背景图片,&lt;/h3&gt;

&lt;p&gt;下面的代码，可以设置 UINavigationBar 背景色和背景图片&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;	//背景色
    [[UINavigationBar appearance] setBarTintColor:[UIColor colorWithRed:16/255.0 green:126/255.0 blue:219/255.0 alpha:1.0]];
	//背景图
    [[UINavigationBar appearance] setBackgroundImage:[self imageFromColor:[UIColor colorWithRed:16/255.0 green:126/255.0 blue:219/255.0 alpha:1.0]] forBarMetrics:UIBarMetricsDefault];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你发现实际的颜色比设置的颜色淡一点，那是因为导航栏默认带了半透明效果，我们可以通过代码或在storyboard中取消半透明效果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;    [[UINavigationBar appearance] setTranslucent:NO];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/Translucent.png&quot; alt=&quot;storyboard取消Translucent&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是如果导航栏下方刚好有一个颜色和导航栏背景色一样的View时，比如 SegmentFalut，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2016/03/SegmentFalut.png&quot; alt=&quot;SegmentFalut&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时会在导航栏下方出现一根黑线，比较难看，使用下面的代码可以去除导航栏下方的横线，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;	//#107cdb
	[[UINavigationBar appearance] setBackgroundImage:[self imageFromColor:[UIColor colorWithRed:16/255.0 green:126/255.0 blue:219/255.0 alpha:1.0]] forBarMetrics:UIBarMetricsDefault];
	[[UINavigationBar appearance] setShadowImage:[UIImage new]];
	//
	//如果设置了导航栏背景色，不想要 backgroundImage，则 backgroundImage 可以设置为 `[UIImage new]`，如下
	//[[UINavigationBar appearance] setBackgroundImage: [UIImage new] forBarMetrics:UIBarMetricsDefault];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/03/compare.png&quot; alt=&quot;compare&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Mar 2016 23:52:02 +0800</pubDate>
        <link>http://vanbein.com/posts/tips/2016-3-4-bi-ji</link>
        <guid isPermaLink="true">http://vanbein.com/posts/tips/2016-3-4-bi-ji</guid>
        
        <category>iOS</category>
        
        <category>Tip</category>
        
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>Xcode常用的Debug调试技巧总结</title>
        <description>&lt;p&gt;本文主要记录下Xcode结合LLDB调试命令以及OBJC运行时的调试技巧，不定期更新&lt;/p&gt;

&lt;p&gt;###常用宏定义&lt;br /&gt;
####1、OPTIMIZE，Debug和Release判定&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Release编译时定义&lt;/li&gt;
  &lt;li&gt;当我们想要某些代码只在Debug环境下才运行可以使用此宏定义判别，代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;- (BOOL)isDebugMode{ 
#ifndef __OPTIMIZE__
    return YES;
#else
    return NO;
#endif
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####2、i386与x86_64，模拟器环境判定&lt;br /&gt;
有时工程依赖的Lib库只编译了真机的代码，模拟器编译出错。为了可以模拟器调试，使用此宏略过不能编译的代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;- (BOOL)isSimulatorMode{
#if defined (__i386__) || defined (__x86_64__)
    return YES;  //模拟器
#else
    return NO; //真机
#endif
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####3、__IPHONE_8_0等，编译SDK的判定&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SDK中会声明当前SDK版本定义，并且保留过往SDK版本定义&lt;/li&gt;
  &lt;li&gt;有时我们编写的代码可能不会在最新的SDK编译，旧版本SDK编译会有潜在问题。使用此判定针对新老SDK版本分别编写代码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;__IPHONE_OS_VERSION_MAX_ALLOWED&lt;/code&gt;，此宏定义声明了当前编译的SDK版本，可进行比较&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;#define __IPHONE_2_0     20000
#define __IPHONE_2_1     20100
#define __IPHONE_2_2     20200
#define __IPHONE_3_0     30000
#define __IPHONE_3_1     30100
#define __IPHONE_3_2     30200
#define __IPHONE_4_0     40000
#define __IPHONE_4_1     40100
#define __IPHONE_4_2     40200
#define __IPHONE_4_3     40300
#define __IPHONE_5_0     50000
#define __IPHONE_5_1     50100
#define __IPHONE_6_0     60000
#define __IPHONE_6_1     60100
#define __IPHONE_7_0     70000
#define __IPHONE_7_1     70100
#define __IPHONE_8_0     80000
#define __IPHONE_8_1     80100
#define __IPHONE_8_2     80200
#define __IPHONE_8_3     80300
#define __IPHONE_8_4     80400
#define __IPHONE_9_0     90000
#define __IPHONE_9_1     90100
#define __IPHONE_9_2     90200
//······
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####4、NOP，空语句&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C语言中有nop()函数，表示一条空语句。OC中没有提供。&lt;/li&gt;
  &lt;li&gt;可以设计一个宏进行代替，用于挂载条件断点调试使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;#ifndef __OPTIMIZE__
    #define ___NOP___   \assert(1)
#else
    #define ___NOP___
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###二、常用调试命令&lt;/p&gt;

&lt;p&gt;####1、PO，输出对象信息&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;po调用NSObject的description方法打印对象&lt;/li&gt;
  &lt;li&gt;po 的使用格式：
    &lt;ul&gt;
      &lt;li&gt;po 变量名&lt;/li&gt;
      &lt;li&gt;po 内存地址&lt;/li&gt;
      &lt;li&gt;po 可返回对象的表达式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果对象没有被释放，PO会输出内容，否则只输出一个代表野指针的数字。根据此特性可在循环引用* 检查中判定对象是否被正常释放。&lt;/li&gt;
  &lt;li&gt;配合表达式进行复杂查询&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####2、P，输出变量的值&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用格式：p (类型)表达式&lt;/li&gt;
  &lt;li&gt;除了值类型，也可以直接打印结构体数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/p.png&quot; alt=&quot;p,输出变量的值&quot; title=&quot;LLDB--p,输出变量的值&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####3、Call，执行一段代码&lt;br /&gt;
* 使用格式：call (返回类型)表达式&lt;br /&gt;
* 调试状态下，对于点语法支持不佳。如果发现符号未找到的情况，尝试使用发送消息的方式。如果还不行，根据提示，声明类型。对于PO、P等指令同样也需要注意&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/call_1.png&quot; alt=&quot;call_1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用call可以修改值。&lt;/li&gt;
  &lt;li&gt;gdb下可以使用set实现，但LLDB下set语法含义变化了，用call替代set指令&lt;br /&gt;
配合NOP与断点，可以在运行时动态的控制程序的运行状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/call_2.png&quot; alt=&quot;call_2&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以执行一段代码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/call_3.png&quot; alt=&quot;call_3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####4、bt，打印调用栈&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/bt.png&quot; alt=&quot;bt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###三、断点的使用技巧&lt;/p&gt;

&lt;p&gt;####1、一个普通断点可以做什么事情&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;可以加入一个条件，当满足此条件时触发断点。&lt;/li&gt;
  &lt;li&gt;或者当执行某些次后才会触发&lt;/li&gt;
  &lt;li&gt;可以执行若干种类的action&lt;/li&gt;
  &lt;li&gt;当经过此断点时，执行action但是不会中断程序&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/breakpoint_1.png&quot; alt=&quot;breakpoint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####2、略特殊的断点&lt;br /&gt;
在&lt;code&gt;Breakpoint Navigator&lt;/code&gt;栏的左下角，点击加号可以给程序添加几种不同类型的断点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/breakpoint_2.png&quot; alt=&quot;breakpoint_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####3、Exception Breakpoint 全局异常断点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;某些crash是由程序抛出的异常导致的，比如数组越界。可以通过添加异常断点监控异常抛出的位置。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####4、符号断点 Symbolic Breakpoint&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当符号对应的方法被调用时，中断&lt;/li&gt;
  &lt;li&gt;-/+[类 方法]&lt;/li&gt;
  &lt;li&gt;举个例子：当UIViewController被载入时触发，并将当前的调用栈输出&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/breakpoint_3.png&quot; alt=&quot;breakpoint_3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####5、内存断点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当该块内存被调用时中断&lt;/li&gt;
  &lt;li&gt;可通过XCode调试界面简化指令添加&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/breakpoint_4.png&quot; alt=&quot;breakpoint_4&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;添加时，需要预先打断，找到要监视的内存地址（注意，地址每次启动都会失效）&lt;/li&gt;
  &lt;li&gt;可以输出值的变化。可以找出内存是何时被修改的，值是如何变化的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/breakpoint_5.png&quot; alt=&quot;breakpoint_5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###四、灵活的使用调试手段&lt;/p&gt;

&lt;p&gt;以上这些调试手段虽然看起来比较简单，但只要灵活运用，就可以为调试带来很多便利和可能性。&lt;br /&gt;
比如下面一个例子&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/debug.png&quot; alt=&quot;debug&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中有三个变量a，b，c。只要在NOP语句加入一个执行call命令的条件断点，通过调节断点的开闭，就可以在程序运行时动态的控制a,b,c的数值。这使得不用编写调试代码，就可以模拟各个状态，动态的调试程序分支。&lt;/p&gt;

&lt;p&gt;此外，当程序发生异常时，一般是通过控制台报错信息，被动的定位问题所在。如果使用调试命令结合OBJC的运行时，可以主动的获知发生异常的状态。在MRC开发的时代，对于多次释放对象的问题，甚至可以一定程度的将僵尸对象还原回原始的对象，从而定位问题所在。&lt;/p&gt;

&lt;p&gt;所以只要灵活的运用上面这些调试手段，很快就能成为一个调试高手。&lt;/p&gt;

</description>
        <pubDate>Fri, 26 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://vanbein.com/posts/ios%E8%BF%9B%E9%98%B6/xcode-debug</link>
        <guid isPermaLink="true">http://vanbein.com/posts/ios%E8%BF%9B%E9%98%B6/xcode-debug</guid>
        
        <category>iOS</category>
        
        <category>debug</category>
        
        
        <category>ios进阶</category>
        
      </item>
    
      <item>
        <title>iOS 面试题集锦</title>
        <description>&lt;p&gt;整理一些面试相关的知识。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;###1.简述OC中内存管理机制。与retain配对使用的方法是dealloc还是release，为什么？需要与alloc配对使用的方法是dealloc还是release，为什么？readwrite，readonly，assign，retain，copy，nonatomic 、atomic、strong、weak属性的作用？&lt;/p&gt;

&lt;p&gt;管理机制：使用了一种叫做引用计数的机制来管理内存中的对象。OC中每个对象都对应着他们自己的引用计数，引用计数可以理解为一个整数计数器，当使用alloc方法创建对象的时候，持有计数会自动设置为1。当你向一个对象发送retain消息 时，持有计数数值会增加1。相反，当你像一个对象发送release消息时，持有计数数值会减小1。当对象的持有计数变为0的时候，对象会释放自己所占用的内存。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;retain(引用计数加1)-&amp;gt;release（引用计数减1）&lt;/li&gt;
  &lt;li&gt;alloc（申请内存空间）-&amp;gt;dealloc(释放内存空间)&lt;/li&gt;
  &lt;li&gt;readwrite: 表示既有getter，也有setter   (默认)&lt;/li&gt;
  &lt;li&gt;readonly: 表示只有getter，没有setter&lt;/li&gt;
  &lt;li&gt;retain: release旧的对象，将旧对象的值赋予输入对象，再提高输入对象的索引计数为1&lt;/li&gt;
  &lt;li&gt;assign: 简单赋值，不更改索引计数    （默认）&lt;/li&gt;
  &lt;li&gt;copy: 其实是建立了一个相同的对象,地址不同（retain：指针拷贝  copy：内容拷贝）&lt;/li&gt;
  &lt;li&gt;strong:（ARC下的）和（MRC）retain一样    （默认）&lt;/li&gt;
  &lt;li&gt;weak:（ARC下的）和（MRC）assign一样， weak当指向的内存释放掉后自动nil化，防止野指针&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;unsafe_unretained 声明一个弱应用，但是不会自动nil化，也就是说，如果所指向的内存区域被释放了，这个指针就是一个野指针了。 autoreleasing 用来修饰一个函数的参数，这个参数会在函数返回的时候被自动释放。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;nonatomic:不考虑线程安全&lt;/li&gt;
  &lt;li&gt;atomic:线程操作安全   （默认）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;线程安全情况下的setter和getter：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;- (NSString\*) value  {     
        @synchronized(self) {         
        return [[_value retain] autorelease];     
}} 
(void) setValue:(NSString*)aValue {     
   @synchronized(self) {         
   [aValue retain];         
   [_value release];         
   _value = aValue;     
}  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###2.类变量的@protected ,@private,@public,@package，声明各有什么含义？&lt;br /&gt;
* @private：作用范围只能在自身类&lt;br /&gt;
* @protected：作用范围在自身类和继承自己的子类  （默认）&lt;br /&gt;
* @public：作用范围最大，可以在任何地方被访问。&lt;br /&gt;
* @package：这个类型最常用于框架类的实例变量,同一包内能用，跨包就不能访问&lt;/p&gt;

&lt;p&gt;###3.线程是什么？进程是什么？二者有什么区别和联系？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一个程序至少有一个进程,一个进程至少有一个线程：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;进程：一个程序的一次运行，在执行过程中拥有独立的内存单元，而多个线程共享一块内存&lt;/li&gt;
  &lt;li&gt;线程：线程是指进程内的一个执行单元。&lt;/li&gt;
  &lt;li&gt;联系：线程是进程的基本组成单位&lt;/li&gt;
  &lt;li&gt;区别：
    &lt;ul&gt;
      &lt;li&gt;(1)调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位&lt;/li&gt;
      &lt;li&gt;(2)并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行&lt;/li&gt;
      &lt;li&gt;(3)拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源.&lt;/li&gt;
      &lt;li&gt;(4)系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;举例说明：操作系统有多个软件在运行（QQ、office、音乐等），这些都是一个个进程，而每个进程里又有好多线程（比如QQ，你可以同时聊天，发送文件等）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###4.谈谈你对多线程开发的理解？ios中有几种实现多线程的方法？&lt;/p&gt;

&lt;p&gt;#####好处：&lt;br /&gt;
* 1.使用线程可以把占据时间长的程序中的任务放到后台去处理&lt;br /&gt;
* 2.用户界面可以更加吸引人，这样比如用户点击了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度&lt;br /&gt;
* 3.程序的运行速度可能加快&lt;br /&gt;
* 4·在一些等待的任务实现上如用户输入、文件读写和网络收发数据等，线程就比较有用了。&lt;br /&gt;
#####缺点：&lt;br /&gt;
* 1.如果有大量的线程,会影响性能,因为操作系统需要在它们之间切换。&lt;br /&gt;
* 2.更多的线程需要更多的内存空间。&lt;br /&gt;
* 3.线程的中止需要考虑其对程序运行的影响。&lt;br /&gt;
* 4.通常块模型数据是在多个线程间共享的，需要防止线程死锁情况的发生。&lt;br /&gt;
####实现多线程的方法：&lt;br /&gt;
* NSObject类方法&lt;br /&gt;
* NSThread&lt;br /&gt;
* NSOperation&lt;br /&gt;
* GCD&lt;/p&gt;

&lt;p&gt;###5.线程同步和异步的区别？IOS中如何实现多线程的同步？&lt;br /&gt;
* &lt;strong&gt;异步&lt;/strong&gt;：举个简单的例子 就是游戏，游戏会有图像和背景音乐&lt;br /&gt;
* &lt;strong&gt;同步&lt;/strong&gt;:是指一个线程要等待上一个线程执行完之后才开始执行当前的线程,上厕所&lt;br /&gt;
* NSOperationQueue：maxcurrentcount&lt;br /&gt;
* NSConditionLock&lt;br /&gt;
* GCD -&amp;gt; &lt;a href=&quot;http://blog.csdn.net/onlyou930/article/details/8225906&quot;&gt;(http://blog.csdn.net/onlyou930/article/details/8225906&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###6.假设有一个字符串aabcad，请写一段程序，去掉字符串中不相邻的重复字符串，即上述字符串处理之后的输出结果为：aabcd&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSMutableString * str = [[NSMutableString alloc]initWithFormat;@“aabcad”];
for (int i = 0 ,i &amp;lt; str.length - 1 ;i++){
    unsigned char a = [str characterAtIndex:i];
    for (int j = i + 1 ,j &amp;lt; str.length ,j++){
        unsigned char b = [str characterAtIndex:j];
        if (a == b ){
            if (j == i + 1){
                }else{
                [str deleteCharactersInRange:NSMakeRange(j, 1)];
                }
            }
        }
    }
NSLog(@“%@”,str);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###7.获取一台设备唯一标识的方法有哪些？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/max5945/archive/2013/06/24/3152292.html&quot;&gt;http://www.cnblogs.com/max5945/archive/2013/06/24/3152292.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1)UDID&lt;/li&gt;
  &lt;li&gt;(2)UUID&lt;/li&gt;
  &lt;li&gt;(3)MAC Address&lt;/li&gt;
  &lt;li&gt;(4)OPEN UDID&lt;/li&gt;
  &lt;li&gt;(5)广告标识符&lt;/li&gt;
  &lt;li&gt;(6)Vindor标示符&lt;br /&gt;
&amp;gt; ios7以后使用keychain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###8.iOS类是否可以多继承？如果没有，那可以用其他方法实现吗？简述实现过程。&lt;/p&gt;

&lt;p&gt;不可以多继承    用protocol实现&lt;/p&gt;

&lt;p&gt;###9.堆和栈的区别？&lt;/p&gt;

&lt;p&gt;堆需要用户手动释放内存，而栈则是编译器自动释放内存&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;问题扩展：要知道OC中NSString的内存存储方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###10.iOS本地数据存储都有哪几种方式？&lt;br /&gt;
* NSKeyedArchiver    &lt;br /&gt;
* NSUserDefaults&lt;br /&gt;
* Write写入方式&lt;br /&gt;
* SQLite3&lt;br /&gt;
&lt;a href=&quot;http://blog.csdn.net/tianyitianyi1/article/details/7713103&quot;&gt;http://blog.csdn.net/tianyitianyi1/article/details/7713103&lt;/a&gt;&lt;br /&gt;
&amp;gt; 问题扩展：什么情况下使用什么样的数据存储&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.NSKeyedArchiver：采用归档的形式来保存数据，数据对象需要遵守NSCoding协议，对象对应的类必须提供encodeWithCoder:和initWithCoder:方法。缺点：只能一次性归档保存以及一次性解压。所以只能针对小量数据，对数据操作比较笨拙，如果想改动数据的某一小部分，需要解压或归档整个数据。&lt;/li&gt;
  &lt;li&gt;2.NSUserDefaults：用来保存应用程序设置和属性、用户保存的数据。用户再次打开程序或开机后这些数据仍然存在。NSUserDefaults可以存储的数据类型包括：NSData、NSString、NSNumber、NSDate、NSArray、NSDictionary。缺点：如果要存储其他类型，需要转换为前面的类型，才能用NSUserDefaults存储。&lt;/li&gt;
  &lt;li&gt;3.Write写入方式：永久保存在磁盘中。第一步：获得文件即将保存的路径：第二步：生成在该路径下的文件：第三步：往文件中写入数据：最后：从文件中读出数据：&lt;/li&gt;
  &lt;li&gt;4.SQLite：采用SQLite数据库来存储数据。SQLite作为一中小型数据库，应用ios中，跟前三种保存方式相比，相对比较复杂一些。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###11.写出方法获取iOS内存使用情况。&lt;br /&gt;
&lt;a href=&quot;http://blog.sina.com.cn/s/blog_698415f20100yjlo.html&quot;&gt;http://blog.sina.com.cn/s/blog_698415f20100yjlo.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;// 获取当前设备可用内存及所占内存的头文件
#import &amp;lt;sys/sysctl.h&amp;gt;
#import &amp;lt;mach/mach.h&amp;gt;
//
// 获取当前设备可用内存(单位：MB）
- (double)availableMemory
{
  vm_statistics_data_t vmStats;
  mach_msg_type_number_t infoCount = HOST_VM_INFO_COUNT;
  kern_return_t kernReturn = host_statistics(mach_host_self(), 
                                             HOST_VM_INFO, 
                                             (host_info_t)&amp;amp;vmStats, 
                                             &amp;amp;infoCount);
  if (kernReturn != KERN_SUCCESS) {
    return NSNotFound;
  }
  return ((vm_page_size *vmStats.free_count) / 1024.0) / 1024.0;
}
//
// 获取当前任务所占用的内存（单位：MB）
- (double)usedMemory
{
  task_basic_info_data_t taskInfo;
  mach_msg_type_number_t infoCount = TASK_BASIC_INFO_COUNT;
  kern_return_t kernReturn = task_info(mach_task_self(), 
                                       TASK_BASIC_INFO, 
                                       (task_info_t)&amp;amp;taskInfo, 
                                       &amp;amp;infoCount);
  if (kernReturn != KERN_SUCCESS
      ) {
    return NSNotFound;
  }
  return taskInfo.resident_size / 1024.0 / 1024.0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;问题扩展：如何利用Xcode观察内存使用情况&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###12.深拷贝和浅拷贝的理解？&lt;br /&gt;
&lt;a href=&quot;http://blog.sina.com.cn/s/blog_7b9d64af01019jq8.html&quot;&gt;http://blog.sina.com.cn/s/blog_7b9d64af01019jq8.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.sina.com.cn/s/blog_7b9d64af01019k6n.html&quot;&gt;http://blog.sina.com.cn/s/blog_7b9d64af01019k6n.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对实例进行深拷贝时当前类需要实现NSCopying协议。&lt;/li&gt;
  &lt;li&gt;浅拷贝是复制出来一个跟原对象相同地址的对象&lt;/li&gt;
  &lt;li&gt;深拷贝时复制一个跟源对象不同地址的对象 改变源对象对新对象没有影响&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###13.怎样实现一个singleton的类。&lt;br /&gt;
&lt;a href=&quot;http://blog.csdn.net/zhugq_1988/article/details/8568033&quot;&gt;http://blog.csdn.net/zhugq_1988/article/details/8568033&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;问题扩展：单例的好处是什么？–&amp;gt; 节省内存&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###14.什么是安全释放？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;置nil 再释放&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;###15.RunLoop是什么？&lt;br /&gt;
&lt;a href=&quot;http://blog.csdn.net/jjunjoe/article/details/8313016&quot;&gt;http://blog.csdn.net/jjunjoe/article/details/8313016&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###16.什么是序列化和反序列化，可以用来做什么？如何在OC中实现复杂对象的存储？&lt;br /&gt;
&lt;a href=&quot;http://blog.csdn.net/zjl201309/article/details/12707979&quot;&gt;http://blog.csdn.net/zjl201309/article/details/12707979&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;序列化是把对象转化成字节序列的过程  反序列化是把字节序列恢复成对象&lt;/li&gt;
  &lt;li&gt;将对象写到文件或者数据库里，并且能读取出来&lt;/li&gt;
  &lt;li&gt;遵循NSCoding协议 实现复杂对象的存储 实现该协议后可以对其进行打包或解包，转化成NSData&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###17.写一个标准宏MIN，这个宏输入两个参数并返回较小的一个？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;\#define MIN(X,Y)  ((X)&amp;gt;(Y)?(Y):(X))
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;扩展：在定义宏的时候需要注意哪些问题？&lt;br /&gt;
1. 宏全部大写、 &lt;br /&gt;
2. 写在#import下，@interface上、&lt;br /&gt;
3. 结尾无分号&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###18.iOS有没有垃圾回收机制？简单阐述一下OC内存管理。&lt;/p&gt;

&lt;p&gt;iOS没有垃圾回收机制  oc的内存管理是&lt;strong&gt;谁创建谁释放&lt;/strong&gt;  程序中遇到retain 该对象引用计数+1 遇release该对象引用计数-1 retainCount为0时 内存释放&lt;/p&gt;

&lt;p&gt;###19.简述应用程序按Home键进入后台时的生命周期，以及从后台回到前台时的生命周期？&lt;br /&gt;
&lt;a href=&quot;http://blog.csdn.net/totogo2010/article/details/8048652&quot;&gt;http://blog.csdn.net/totogo2010/article/details/8048652&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自己可以写个demo来测试一下&lt;br /&gt;
进入后台时&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;-(void)applicationWillResignActive:(UIApplication *)application;
-(void)applicationDidEnterBackground:(UIApplication *)application;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入前台时&lt;br /&gt;
&lt;code&gt;objc
-(void)applicationDidEnterForeground:(UIApplication *)application;
-(void)applicationWillResignActive:(UIApplication *)application;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###20.ViewController 的 alloc，loadView, viewDidLoad,viewWillAppear,viewDidUnload,dealloc、init分别是在什么时候调用的？在自定义ViewController的时候这几个函数里面应该做什么工作？&lt;br /&gt;
&lt;a href=&quot;http://www.xuebuyuan.com/672935.html&quot;&gt;http://www.xuebuyuan.com/672935.html&lt;/a&gt;&lt;br /&gt;
自己写代码测试加深理解&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;alloc申请内存时调用&lt;/li&gt;
  &lt;li&gt;loadView加载视图时调用&lt;/li&gt;
  &lt;li&gt;ViewDidLoad视图已经加载后调用&lt;/li&gt;
  &lt;li&gt;ViewWillAppear视图将要出现时调用&lt;/li&gt;
  &lt;li&gt;ViewDidUnload视图已经加载但没有加载出来调用&lt;/li&gt;
  &lt;li&gt;dealloc销毁该视图时调用&lt;/li&gt;
  &lt;li&gt;init视图初始化时调用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###21.描述应用程序的启动顺序。&lt;br /&gt;
1. 程序入口main函数创建UIApplication实例和UIApplication代理实例。&lt;br /&gt;
2. 在UIApplication代理实例中重写启动方法，设置第一ViewController。&lt;br /&gt;
3. 在第一ViewController中添加控件，实现应用程序界面。&lt;/p&gt;

&lt;p&gt;###22.为什么很多内置类如UITableViewControl的delegate属性都是assign而不是retain？请举例说明。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;防止循环引用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;###23.使用UITableView时候必须要实现的几种方法？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;//
-(NSInteger)tableView:(UITableView *)tableView NumberOfRowsInSection:(NSInteger)section;
``` 这个方法返回每个分段(section)的行数，不同分段返回不同的行数可以用switch来做，如果是单个列表就直接返回单个你想要的函数即可。

```objc
// - (UITableViewCell *)tableView:(UITableView *)tableView CellForRowAtIndexPath:(NSIndexPath)indexPath;
``` 这个方法是返回我们调用的每一个单元格。通过我们索引的路径的section和row来确定


###24.写一个便利构造器。
```objc
//id代表任意类型指针，这里代表Student *,类方法
+(id)studentWithName:(NSString *)newName  andAge:(int)newAge {     Student *stu=[[Student alloc]initName:newName andAge:newAge];     return [stu autorelease];//自动释放 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###25.UIImage初始化一张图片有几种方法？简述各自的优缺点。&lt;br /&gt;
&lt;a href=&quot;http://blog.sina.com.cn/s/blog_a843a8850101flo3.html&quot;&gt;http://blog.sina.com.cn/s/blog_a843a8850101flo3.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;三种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;imageNamed:&lt;/code&gt; 系统会先检查系统缓存中是否有该名字的Image，如果有的话，则直接返回，如果没有，则先加载图像到缓存，然后再返回。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;initWithContentsOfFile：&lt;/code&gt; 系统不会检查系统缓存，而直接从文件系统中加载并返回。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;imageWithCGImage：scale：orientation&lt;/code&gt; 当scale=1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###26.回答person的retainCount值，并解释为什么&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;Person * per = [[Person alloc] init];
self.person = per;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###27.这段代码有什么问题吗:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;@implementation Person
- (void)setAge:(int)newAge {
	self.age = newAge;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会造成死循环，正确写法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;- (void)setAge:(int)newAge {
	if(_age){
		[_age release];
	}
	_age = [newAge retain];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;扩展：知道如何正确写setter和getter方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###28.这段代码有什么问题,如何修改&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;for (int i = 0; i &amp;lt; someLargeNumber; i++) { 
	NSString *string = @”Abc”;//常量区
	string = [string lowercaseString];//新的堆区
	string = [string stringByAppendingString:@&quot;xyz&quot;];//新的堆区
	NSLog(@“%@”, string);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在for循环里添加自动释放池&lt;br /&gt;
&amp;gt; 扩展：常量区的retaincount是怎么个情况&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;###29.截取字符串”20&lt;/td&gt;
      &lt;td&gt;http://www.baidu.com”中，”&lt;/td&gt;
      &lt;td&gt;”字符前面和后面的数据，分别输出它们。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;使用方法&lt;code&gt;componentsSeparatedByString:&lt;/code&gt;，示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString * str = @“20 | http://www.baidu.com”;
for(NSString*s in [str componentsSeparatedByString:&quot;|&quot;]){
NSLog(@“%@“,s);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###30.用obj-c写一个冒泡排序&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;for（int i = 0, i &amp;lt; arr.count - 1,i++){
	for (int j = 0,j &amp;lt; arr.count - 1 - i;j++){
		int a = [[arr objectAtIndex:j]intValue];
		int b=[[arr objectAtIndex:j+1]intValue];
		if(a &amp;lt; b){
			[arr replaceObjectAtIndex:j withObject:[NSString stringWithFormat:@“%d”,b]];
			[arr replaceObjectAtIndex:j+1 withObject:[NSString stringWithFormat:@“%d”,a];
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###31.简述你对UIView、UIWindow和CALayer的理解&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/kuqideyupian/article/details/7731942&quot;&gt;http://blog.csdn.net/kuqideyupian/article/details/7731942&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://o0o0o0o.iteye.com/blog/1728599&quot;&gt;http://o0o0o0o.iteye.com/blog/1728599&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###32.写一个完整的代理，包括声明，实现&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意手写的准确性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###33.分析json、xml的区别？json、xml解析方式的底层是如何处理的？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.open-open.com/bbs/view/1324367918671&quot;&gt;http://www.open-open.com/bbs/view/1324367918671&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://hi.baidu.com/fevelen/item/a25253ab76f766756cd455b6&quot;&gt;http://hi.baidu.com/fevelen/item/a25253ab76f766756cd455b6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###34.ViewController 的 didReceiveMemoryWarning 是在什么时候被调用的？默认的操作是什么?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_68661bd80101nn6p.html&quot;&gt;http://blog.sina.com.cn/s/blog_68661bd80101nn6p.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###35.面向对象的三大特征，并作简单的介绍&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;封装、继承、多态&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多态：父类指针指向子类对象。两种表现形式：重写（父子类之间）和重载（本类中）&lt;br /&gt;
OC的多态体现是：重写，没有重载这种表现形式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举例说明：&lt;br /&gt;
&lt;code&gt;objc Parent类
@interface Parent : NSObject    //父类
- (void)simpleCall;
@end 
&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;objc Child_A类
@interface Child_A : Parent   //子类  Child_A
@end 
@implementation Child_A
- (void)simpleCall
{
    NSLog(@&quot;我是Child_A的simpleCall方法&quot;);
}
@end
&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;objc Child_B类
@interface Child_B : Parent     //子类Child_B
@end
- (void)simpleCall
{
     NSLog(@&quot;我是Child_的simpleCall方法&quot;);
}
@end
&lt;/code&gt;&lt;br /&gt;
然后，我们就可以看到多态所展示的特性了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;Parent * pa=[[Child_A alloc] init];// 父类指针指向子类Child_A对象
Parent * pb=[[Child_B alloc] init]; //父类指针指向子类Child_B对象
[pa simpleCall];// 显然是调用Child_A的方法
[pb simpleCall];// 显然是调用Child_B的方法
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在OC中常看见的多态体现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;//
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath  
 {  
     static NSString *CellWithIdentifier = @&quot;Cell&quot;;  
      UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellWithIdentifier];  
      return cell;  
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(UITableViewCell *)指向cell子类对象&lt;/p&gt;

&lt;p&gt;###36.重写一个NSString类型的，retain方式声明name属性的setter和getter方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;-(void)settetName:(NSString *)name{
	if(_name){
		[_name release];
	}
 	_name = [name retain];
}
-(NSString *)getterName{
	return [[_name retain]autorelease];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###37.简述NotificationCenter、KVC、KVO、Delegate？并说明它们之间的区别？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zuoerjin/article/details/7858488&quot;&gt;http://blog.csdn.net/zuoerjin/article/details/7858488&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.sina.com.cn/s/blog_bf9843bf0101j5px.html&quot;&gt;http://blog.sina.com.cn/s/blog_bf9843bf0101j5px.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###38.What is lazy loading?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;懒加载模式&lt;/strong&gt;，只在用到的时候才去初始化。也可以理解成延时加载。我觉得最好也最简单的一个列子就是tableView中图片的加载显示了。一个延时载，避免内存过高，一个异步加载，避免线程堵塞&lt;/p&gt;

&lt;p&gt;###39.什么是Protocol？什么是代理？写一个委托的interface？委托的property声明用什么属性？为什么？&lt;/p&gt;

&lt;p&gt;委托的property声明用什么属性是assign（防止循环引用）&lt;/p&gt;

&lt;p&gt;###40.分别描述类别（categories）和延展（extensions）是什么？以及两者的区别？继承和类别在实现中有何区别？为什么Category只能为对象添加方法，却不能添加成员变量？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;考虑类目比继承的优点&lt;/li&gt;
  &lt;li&gt;类别是把类的实现方法分散到不同的文件中 也可以给类扩展新方法&lt;/li&gt;
  &lt;li&gt;延展是给类添加私有方法 只为自己类所见 所使用&lt;/li&gt;
  &lt;li&gt;继承可以扩展实例变量 而类别不能&lt;/li&gt;
  &lt;li&gt;类别如果可以添加成员变量 就跟继承没什么两样了  而且在上线的项目更新中 用类别笔继承更能维护项目的稳定性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###41.Objective-C有私有方法么？私有变量呢？如多没有的话，有没有什么代替的方法？&lt;/p&gt;

&lt;p&gt;OC没有私有方法 但是有私有变量 @property  私有方法可以用延展代替&lt;/p&gt;

&lt;p&gt;###42.#import、#include和@class有什么区别&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;#import 系统文件、自定义文件引用 不用担心重复引用的问题&lt;/li&gt;
  &lt;li&gt;#include 跟#import几乎一样 但是他需要注意不能重复引用&lt;/li&gt;
  &lt;li&gt;@class 只是告诉系统有这个类 但是如果在实现类中用到这个类 需要重新用#import导入该类头文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###43.谈谈你对MVC的理解？为什么要用MVC？在Cocoa中MVC是怎么实现的？你还熟悉其他的OC设计模式或别的设计模式吗？&lt;/p&gt;

&lt;p&gt;mvc - model view controller ，避免了view与model 的强耦合 使代码更灵活 更容易维护 可复用 可扩展   OC其他设计模式有Notification 。target；action.  singleton delegate&lt;/p&gt;

&lt;p&gt;###44.如监测系统键盘的弹出&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//监听通知
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector( ) name:UIKeyboardWillShowNotification object:nil];
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;扩展：ios 弹出键盘挡住UITextView的解决方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###45.举出5个以上你所熟悉的ios  sdk库有哪些和第三方库有哪些？&lt;/p&gt;

&lt;p&gt;AFWorking / WebKit / SQLite / Core Data / Address Book&lt;/p&gt;

&lt;p&gt;###46.如何将产品进行多语言发布？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://fengmm521.blog.163.com/blog/static/25091358201291645852889/&quot;&gt;http://fengmm521.blog.163.com/blog/static/25091358201291645852889/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###47.如何将敏感字变成**&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	search = @&quot;某某某&quot;;
    replace = @&quot;***&quot;;
    range = [mstr rangeOfString:search];
    [mstr replaceCharactersInRange:range withString:replace]；    
    NSLog(@&quot;%@&quot;,mstr);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###48.objc中的减号与加号代表什么？&lt;/p&gt;

&lt;p&gt;-表示实例方法&lt;br /&gt;
+表示类方法&lt;/p&gt;

&lt;p&gt;###49.单例目的是什么，并写出一个？&lt;/p&gt;

&lt;p&gt;避免重复创建  节省内存空间&lt;br /&gt;
&lt;code&gt;
static Model * model;
+(id)singleton{
	if(!model){
	 @synchronized(self){
		model = [[Model alloc]init];
		}
	}
	return model;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###50.说说响应链&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tuicool.com/articles/6jmUje&quot;&gt;http://www.tuicool.com/articles/6jmUje&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;从手指触摸屏幕的地方的最上层控件是第一响应者，事件会沿着响应链一直向下传递直到被接受并作出处理&lt;/p&gt;

</description>
        <pubDate>Tue, 23 Feb 2016 23:52:02 +0800</pubDate>
        <link>http://vanbein.com/posts/tips/ios-interview</link>
        <guid isPermaLink="true">http://vanbein.com/posts/tips/ios-interview</guid>
        
        <category>iOS</category>
        
        <category>Tip</category>
        
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>UINavigationController基础</title>
        <description>&lt;!--more--&gt;

&lt;p&gt;##一、UINavigationController 设置&lt;br /&gt;
UINavigationController通常被我们称为导航栏，它是视图与视图之间联系沟通的桥梁，几乎所有app都用到了它。下面我们来看一下如何建立一个navigation。&lt;/p&gt;

&lt;p&gt;首先，我们通常新建工程是直接将视图控制器添加到window上，而现在有navigation以后，就多了一层：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;objc AppDelegate.m
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions  
{  
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];  
	//
    self.window.backgroundColor = [UIColor whiteColor];  
    //至少要有一个被管理的试图控制器，这个控制器我们称作:导航控制器的根视图控制器RootViewController
    RootViewController *root = [[RootViewController alloc]init];  
    //先将rootVC添加在navigation上
    UINavigationController *nav = [[UINavigationController alloc]initWithRootViewController:root];
    //navigation加在window上      
    [_window setRootViewController:nav];  
    //
    [self.window makeKeyAndVisible];  
    return YES;  
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样我们的navigation就加载上去了。下面我们来设置navigation的属性：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;- (void)viewDidLoad  
{  
    [super viewDidLoad];  
    //
    //  获取到 UINavigationBar，
    UINavigationBar *bar = self.navigationController.navigationBar;
    //
    //  设置导航条样式
    //  默认的时白色半透明（有点灰的感觉）,
    //  UIBarStyleBlack,UIBarStyleBlackTranslucent,UIBarStyleBlackOpaque都是黑色半透明，
    //  其实它们有的是不透明有的是透明有的是半透明，但不知为何无效果
    [bar setBarStyle:UIBarStyleBlack];
    //
    //  设置navigationbar的半透明
    [bar setTranslucent:NO];
    //
    //  设置navigationbar上显示的标题 两种方式，推荐第一种 
    self.title = @&quot;navigationController&quot;; //1
    [self.navigationItem setTitle:@&quot;navigationController&quot;];  //2
    //
    //  设置navigationbar的tittle颜色
    [bar setTitleTextAttributes:@{NSForegroundColorAttributeName:[UIColor whiteColor]}];
    //  它的dictionary的key定义以及其对应的value类型如下：
    //  Keys for Text Attributes Dictionaries
	//  NSString *const UITextAttributeFont;                       value: UIFont
	//  NSString *const UITextAttributeTextColor;                 value: UIColor
	//  NSString *const UITextAttributeTextShadowColor;       value: UIColor
	//  NSString *const UITextAttributeTextShadowOffset;      value: NSValue wrapping a UIOffset struct.
    //  设置navigationbar左边按钮  
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonItemStyleDone target:self action:Nil]; 
    // 
    //  设置navigationbar右边按钮 
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonItemStylePlain target:self action:Nil]; 
    //  
    //  设置navigationbar上左右按钮字体颜色
    [bar setTintColor:[UIColor whiteColor]]; 
    //
    //  设置导航条的左右按钮
    //  先实例化创建一个UIBarButtonItem，然后把这个按钮赋值给self.navigationItem.leftBarButtonItem即可
    //  初始化文字的按钮类型有UIBarButtonItemStylePlain和UIBarButtonItemStyleDone两种类型，区别貌似不大
    //  UIBarButtonItem *barBtn1=[[UIBarButtonItem alloc]initWithTitle:@&quot;左边&quot; style:UIBarButtonItemStylePlain target:self action:@selector(changeColor)];
    //  self.navigationItem.leftBarButtonItem=barBtn1;
    //  我们还可以在左边和右边加不止一个按钮，,且可以添加任意视图，以右边为例
    //  添加多个其实就是rightBarButtonItems属性，注意还有一个rightBarButtonItem，前者是赋予一个UIBarButtonItem对象数组，所以可以显示多个。后者被赋值一个UIBarButtonItem对象，所以只能显示一个
    //  显示顺序，左边：按数组顺序从左向右；右边：按数组顺序从右向左
    //  可以初始化成系统自带的一些barButton，比如UIBarButtonSystemItemCamera是摄像机，还有Done，Reply等等，会显示成一个icon图标
    //  还可以initWithImage初始化成图片
    //  还可以自定义，可以是任意一个UIView
    //  UIBarButtonItem *barBtn2=[[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemCamera target:self action:@selector(changeColor2)];
    //  UIBarButtonItem *barBtn3=[[UIBarButtonItem alloc]initWithImage:[UIImage imageNamed:@&quot;logo-40@2x.png&quot;] style:UIBarButtonItemStylePlain target:self action:@selector(changeColor3)];
    //  UIView *view4=[[UIView alloc]initWithFrame:CGRectMake(10, 10, 20, 20)];
    //  view4.backgroundColor=[UIColor blackColor];
    //  UIBarButtonItem *barBtn4=[[UIBarButtonItem alloc]initWithCustomView:view4];
    //  NSArray *arr1=[[NSArray alloc]initWithObjects:barBtn2,barBtn3,barBtn4, nil nil];
    //self.navigationItem.rightBarButtonItems=arr1;
    //
    //  设置导航栏背景图片
    //  其中forBarMetrics有点类似于按钮的for state状态，即什么状态下显示
    //  UIBarMetricsDefault - 竖屏横屏都有，横屏导航条变宽，则自动repeat图片
    //  UIBarMetricsCompact - 竖屏没有，横屏有，相当于之前老iOS版本里地UIBarMetricsLandscapePhone
    //  UIBarMetricsCompactPrompt和UIBarMetricsDefaultPrompt暂时不知道用处，
    //  官方解释是Applicable only in bars with the prompt property, 
    //  such as UINavigationBar and UISearchBar，
    [bar setBackgroundImage:[UIImage imageNamed:@&quot;bg.png&quot;] forBarMetrics:UIBarMetricsDefault];
    //
    //  如果图片太大会向上扩展侵占状态栏的位置，设置超出导航栏的部分不显示，
    //bar.clipsToBounds = YES;
	//
    //  设置隐藏，由此点击进入其他视图时导航条也会被隐藏，默认是NO
    //[self.navigationController setNavigationBarHidden:YES];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里还有一个属性常用，就是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;	NSArray *arr = [NSArray arrayWithObjects:@&quot;1&quot;, @&quot;2&quot;, nil];  
    UISegmentedControl *segment = [[UISegmentedControl alloc]initWithItems:arr];  
    self.navigationItem.titleView = segment;//设置navigation上的titleview  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/02/navigation.png&quot; alt=&quot;&amp;quot;UISegmentedControl&amp;quot;&quot; title=&quot;UISegmentedControl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对，我们看到中间的字变成了两个可选的按钮，这就是navigation的另一个属性：&lt;code&gt;navigationitem.titleview&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;##UINavigationController的工作原理&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;UINavigationController通过栈的方式管理控制器的切换，控制入栈和出栈，来展示各个视图控制器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UINavigationController的ControllersView里始终显示栈顶控制器的view&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;viewControllers 属性存储了栈中的所有被管理的控制器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;navigationController属性，父类中的属性，每一个在栈中的控制器都能通过此属性，获取自己所在的UINavigationController对象&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###出栈和入栈的方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pushViewController: animated  //进入下一个视图控制器&lt;/li&gt;
  &lt;li&gt;popViewControllerAnimated:  //返回上一个视图控制器&lt;/li&gt;
  &lt;li&gt;popToViewController: animated //返回到指定的视图控制器&lt;/li&gt;
  &lt;li&gt;popToRootViewControllerAnimated  //返回到根视图控制器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###常用属性有&lt;br /&gt;
* viewControllers  //所有处于栈中的控制器&lt;br /&gt;
* topViewController  //位于栈顶的控制器&lt;br /&gt;
* visibleViewController //当前正在显示的控制器&lt;br /&gt;
* navigationBar  //导航条&lt;br /&gt;
* topViewController 代表当前navigation栈中最上层的VC，而visibleViewController代表当前可见的VC，它可能是topViewController，也可能是当前topViewController present出来的VC。因此UINavigationController的这两个属性通常情况下是一样，但也有可能不同。&lt;br /&gt;
####关于 UINavigationBar&lt;br /&gt;
* navigationBar–导航条，iOS7以后默认是透明的，iOS7以前默认是不透明的。&lt;br /&gt;
* navigationBar在透明情况下，与contentView会重合一部分区域&lt;br /&gt;
* navigationBar在不透明情况，ContentView跟在navigationBar下面&lt;br /&gt;
* navigationBar竖屏下默认高度44，横屏下默认高度32&lt;/p&gt;

&lt;p&gt;####管理UINavigationItem&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UINavigationBar处理能管理一组UINavigationItem&lt;/li&gt;
  &lt;li&gt;与UINavigationController相似，UINavigationBar也是以栈的方式管理一组UINavigationItem。提供push和pop操作item&lt;/li&gt;
  &lt;li&gt;每个视图控制器都有一个navigationItem属性，navigationItem中设置的做按钮、右按钮、标题等，会随着控制器的显示，也显示到navigationBar上&lt;/li&gt;
  &lt;li&gt;UINavigationItem属于MVC中的M，封装了要显示在UiNavigationBar上的数据
    &lt;ul&gt;
      &lt;li&gt;title： 标题&lt;/li&gt;
      &lt;li&gt;titleView ：标题视图&lt;/li&gt;
      &lt;li&gt;leftBarButtonItem ：左按钮&lt;/li&gt;
      &lt;li&gt;rightBarButtonItem ：右按钮&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####UIBarButtonItem&lt;br /&gt;
* UIBarButtonItem属于MVC的M，定义了UINavigationItem上按钮的触发事件，外观等&lt;br /&gt;
* - initWithBarButtonSystemItem：target：action：设置按钮样式及触发事件&lt;br /&gt;
* - initWithTiltle：style：target：action： 设置标题的触发事件&lt;br /&gt;
* - initWithImage：style：target：action：设置视图的触发事件&lt;br /&gt;
* tintColor  设置tintColor可以影响添加在导航条上的系统样式的按钮的颜色&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://vanbein.com/posts/ios%E5%9F%BA%E7%A1%80/uiNavigationController</link>
        <guid isPermaLink="true">http://vanbein.com/posts/ios%E5%9F%BA%E7%A1%80/uiNavigationController</guid>
        
        <category>iOS</category>
        
        <category>navigation</category>
        
        
        <category>ios基础</category>
        
      </item>
    
      <item>
        <title>2016 - just do it!</title>
        <description>&lt;p&gt;转眼，2016 就过去接近三个月，然而我貌似并没有取得突破性的成长，所以接下来我要更加严格要求自己了，别让自己在 2017 才后悔没有尽全力！2016的我，一定要加油啊！&lt;/p&gt;

&lt;p&gt;2015，从走出校园到今天，大半年了，值得去追忆的美好不少，但是我们总得顺着时间向前走，不，不要用走，我需要奔跑，谁让我在大学四年里一直浑浑噩噩呢？往事不再提，就让那些变成过去吧。幸运的是，自己找到感兴趣的一份工作，或许这是老天让我改过自新的机会吧，不至于继续沉沦了。&lt;/p&gt;

&lt;p&gt;我目前要学习的东西太多，要坚持的习惯太多，任务很多，压力很大，但是我必须全部接下。&lt;/p&gt;

&lt;p&gt;对于 iOS，我必须好好学习，踏踏实实，这是一件美好的事情。&lt;/p&gt;

&lt;p&gt;对于亲人朋友，要更加懂得珍惜，当然，还要好好经营眼前这份宝贵的爱情！&lt;/p&gt;

&lt;p&gt;一切，都值得我去努力！&lt;/p&gt;

&lt;p&gt;所以，多看书、多学新东西、多敲代码，多做有意义的事情。&lt;/p&gt;

&lt;p&gt;Yes，just do it! 下面这首歌，一直很有感觉，勉励自己！&lt;/p&gt;

&lt;p&gt;&amp;lt;iframe frameborder=”no” border=”0” marginwidth=”0” marginheight=”0” width=330 height=86 src=”http://music.163.com/outchain/player?type=2&amp;amp;id=29999506&amp;amp;auto=1&amp;amp;height=66”&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://vanbein.com/posts/journal/2016-to-myself</link>
        <guid isPermaLink="true">http://vanbein.com/posts/journal/2016-to-myself</guid>
        
        <category>life</category>
        
        
        <category>journal</category>
        
      </item>
    
      <item>
        <title>KVC的一些不为人知小技巧</title>
        <description>&lt;p&gt;本文主要来记录下一些不为人知，也经常被忽略掉，并且很实用的KVC干货小技巧&lt;/p&gt;

&lt;p&gt;###一、获取数组里的,最大、最小、平均、求和&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSArray *array = @[@&quot;11&quot;, @&quot;9&quot;, @&quot;2&quot;, @&quot;20&quot;, @&quot;8&quot;]; 
NSNumber *sum = [array valueForKeyPath:@&quot;@sum.floatValue&quot;]; 
NSNumber *avg = [array valueForKeyPath:@&quot;@avg.floatValue&quot;]; 
NSNumber *max = [array valueForKeyPath:@&quot;@max.floatValue&quot;]; 
NSNumber *min = [array valueForKeyPath:@&quot;@min.floatValue&quot;];  
NSLog(@&quot;sum:%@&quot;,sum); 
NSLog(@&quot;avg:%@&quot;,avg);
NSLog(@&quot;max:%@&quot;,max); 
NSLog(@&quot;min:%@&quot;,min);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###二、删除重复数据&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSArray *array = @[@&quot;a&quot;, @&quot;b&quot;, @&quot;c&quot;, @&quot;a&quot;, @&quot;d&quot;]; //返回的是一个新的数组
NSArray *newArray = [array valueForKeyPath:@&quot;@distinctUnionOfObjects.self&quot;]; 
NSLog(@&quot;%@&quot;, newArray);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###同样可以嵌套使用，先剔除name对应值的重复数据再取值&lt;br /&gt;
&lt;code&gt;
NSArray *array = @[ @{@&quot;title&quot;:@&quot;zxp&quot;,@&quot;name&quot;:@&quot;zhangxiaoping&quot;}, @{@&quot;title&quot;:@&quot;zxp2&quot;,@&quot;name&quot;:@&quot;zhangxiaoping2&quot;}, @{@&quot;title&quot;:@&quot;zxp&quot;,@&quot;name&quot;:@&quot;zhangxiaoping3&quot;}, @{@&quot;title&quot;:@&quot;zxp&quot;,@&quot;name&quot;:@&quot;zhangxiaoping&quot;}];
//根据name字段，来进行重复删除。
NSArray *newArray = [array valueForKeyPath:@&quot;@distinctUnionOfObjects.name&quot;];
//如果要根据title字段来删除重名的写法为`@distinctUnionOfObjects.title` 
NSLog(@&quot;%@&quot;, newArray);
// print:( zhangxiaoping3, zhangxiaoping2, zhangxiaoping)是一个字符串数组
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###四、进行实例方法的调用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;NSArray *array = @[@&quot;name&quot;, @&quot;w&quot;, @&quot;aa&quot;, @&quot;ZXPing&quot;]; 
NSLog(@&quot;%@&quot;, [array valueForKeyPath:@&quot;uppercaseString&quot;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相当于数组中的每个成员执行了&lt;code&gt;uppercaseString&lt;/code&gt;方法，然后把返回的对象组成一个新数组返回。既然可以用&lt;code&gt;uppercaseString&lt;/code&gt;方法，那么NSString的其他方法也可以，比如&lt;code&gt;[array valueForKeyPath:@&quot;length&quot;]&lt;/code&gt;。当然，其他对象的实例方法也可以以此类推来进行调用！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考文章：&lt;a href=&quot;http://www.jianshu.com/p/a6a0abac1c4a&quot;&gt;高效开发iOS系列 – 那些不为人知的KVC&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Thu, 28 Jan 2016 00:00:00 +0800</pubDate>
        <link>http://vanbein.com/posts/ios%E8%BF%9B%E9%98%B6/%5B%3F%5D-xie-bu-wei-ren-zhi-de-kvcji-qiao</link>
        <guid isPermaLink="true">http://vanbein.com/posts/ios%E8%BF%9B%E9%98%B6/%5B%3F%5D-xie-bu-wei-ren-zhi-de-kvcji-qiao</guid>
        
        <category>iOS</category>
        
        <category>KVC</category>
        
        <category>Bezier</category>
        
        
        <category>ios进阶</category>
        
      </item>
    
      <item>
        <title>翻墙的正确方式 - 免费且简单粗暴</title>
        <description>&lt;!--more--&gt;

&lt;p&gt;本文主要介绍两种免费的翻墙的方式。&lt;/p&gt;

&lt;p&gt;###一、为什么要翻墙？&lt;/p&gt;

&lt;p&gt;我在天朝的IT从业人员中，没有人不知道防火长城GFW(Great Firewall of China)的存在。GFW的利与弊在这不再深究。以下列出的我翻墙的理由：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;搜索，百度的竞价排名搜出来的东西跟google完全不在同一档次，想要更高的搜索质量。&lt;/li&gt;
  &lt;li&gt;作为一个ios开发者，大部分优质的（开源）软件/库都是国外的人开发的。当获取某一个库的时候，不翻墙，更新很慢，甚至无法更新。&lt;/li&gt;
  &lt;li&gt;锻炼英语能力，通过阅读一些原始的文档（至少有工作驱使）来练练英语水平。&lt;/li&gt;
  &lt;li&gt;世界那么大，我想去看看。可以看看外面的资讯，避免一面之辞。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###二、翻墙历程&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;第一次翻墙，使用了免费的VPN，使用起来很难受，非常不稳定，网速也慢。&lt;/li&gt;
  &lt;li&gt;第二次翻墙，使用了付费的VPN，但是仍然不稳定，特别是在公司使用公司网络翻墙时，由于使用同一网络的人太多，所以经常连不上VPN。&lt;/li&gt;
  &lt;li&gt;第三次翻墙，是使用了免费开源的翻墙工具XX-Net(&lt;a href=&quot;https://github.com/XX-net/XX-Net&quot;&gt;https://github.com/XX-net/XX-Net&lt;/a&gt;)，用起来很爽，因为它免费、安装简单、速度快、智能路由，虽然我目前没有再用，但是也是要介绍的主角之一。&lt;/li&gt;
  &lt;li&gt;第四次翻墙，同样是使用了免费开源的翻墙工具 – &lt;a href=&quot;https://github.com/getlantern/lantern&quot;&gt;蓝灯Lantern&lt;/a&gt;，这个用起来比XX-Net还要爽，因为它使用非常非常简单，只需安装，不需要任何代理配置，可使用平台也多，截止写这篇文章的时候已经出了安卓版，iOS暂时没出。强烈推荐使用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###三、Lantern 的使用&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用很简单，到&lt;a href=&quot;https://github.com/getlantern/lantern&quot;&gt;github地址&lt;/a&gt;选择下载自己平台的软件，安装，打开浏览器显示lantern运行成功后，即可免费不限流量翻墙了，如果您对速率要求非常高，请选择使用XX-Net或花钱买个VPN。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###四、XX-Net安装过程&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;该项目的github地址：&lt;a href=&quot;https://github.com/XX-net/XX-Net&quot;&gt;https://github.com/XX-net/XX-Net&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;官方给出的使用教程：&lt;a href=&quot;https://github.com/XX-net/XX-Net/wiki/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95&quot;&gt;使用方法&lt;/a&gt;&lt;br /&gt;
windows系统的可参照官方教程：&lt;a href=&quot;https://github.com/XX-net/XX-Net/wiki/使用方法&quot;&gt;https://github.com/XX-net/XX-Net/wiki/使用方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是我在Mac下的安装步骤。&lt;/p&gt;

&lt;p&gt;由于我觉得上面的教程中配置比较麻烦，发现有现成的集成软件可用，于是我的安装方法如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/XX-Net.png&quot; alt=&quot;集成XX-Net的软件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####1、下载&lt;code&gt;appifed-xx-net&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如上图所示的地方，下载完成后得到一个&lt;code&gt;XX-Net&lt;/code&gt;应用程序，双击打开后会自动打开Safari，此时只需要再配置一下Safari的代理设置即可打开google了。&lt;/p&gt;

&lt;p&gt;####2、代理配置&lt;/p&gt;

&lt;p&gt;官方的设置代理方法(&lt;a href=&quot;https://github.com/XX-net/XX-Net/wiki/设置代理&quot;&gt;https://github.com/XX-net/XX-Net/wiki/设置代理&lt;/a&gt;)没有包括Mac OS系统的设置方法，经过我自己的测试，只需要在&lt;code&gt;Safari - 偏好设置 - 高级 - 代理&lt;/code&gt;选择&lt;code&gt;更改设置&lt;/code&gt;，然后选择&lt;code&gt;自动代理配置&lt;/code&gt;，在URL中输入&lt;code&gt;http://127.0.0.1:8086/proxy.pac&lt;/code&gt;保存应用即可完成代理的设置，此时我们就可以打开google进行搜索了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/delegate.png&quot; alt=&quot;设置代理&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####3、添加自己的AppID&lt;/p&gt;

&lt;p&gt;首先我们需要去创建一个自己的AppID，官方有一个图文并茂的教程，非常清晰：&lt;a href=&quot;https://github.com/XX-net/XX-Net/wiki/how-to-create-my-AppIDs&quot;&gt;how to create my AppIDs&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;下面是我创建AppID的过程：&lt;/p&gt;

&lt;p&gt;创建AppID之前，应保证启用弱安全应用&lt;br /&gt;
&lt;a href=&quot;https://www.google.com/settings/security/lesssecureapps&quot;&gt;https://www.google.com/settings/security/lesssecureapps&lt;/a&gt;&lt;br /&gt;
对于多数用户而言，你只需要启用弱安全应用，就可以上传AppID&lt;/p&gt;

&lt;p&gt;注：如果你已经启用2步登录验证，那么不需要启用弱安全应用，而是设置应用专用密码： &lt;a href=&quot;https://security.google.com/settings/security/apppasswords&quot;&gt;https://security.google.com/settings/security/apppasswords&lt;/a&gt;&lt;br /&gt;
设备选”其他”，随便起个名词，比如GoAgent，点”生成”后，会出来一串密码。 以后就拿这个密码来上传AppID部署服务端&lt;/p&gt;

&lt;p&gt;启用弱安全应用后，打开 &lt;a href=&quot;https://console.developers.google.com&quot;&gt;https://console.developers.google.com&lt;/a&gt; ，你会看到下图的界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/creatappid.png&quot; alt=&quot;创建AppID&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击&lt;code&gt;创建专案&lt;/code&gt;进行创建，然后输入相关信息即可。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注意：AppID只能由字母、-、和数字组成，可填入你希望的AppID，&lt;/li&gt;
  &lt;li&gt;点选不要发送邮件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/appidsetting.png&quot; alt=&quot;设置AppID&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####4、设置部署权限&lt;br /&gt;
提示：在部署之前，AppID是无法使用的，不要将他们填入到XX-Net的配置中。&lt;br /&gt;
1、打开&lt;a href=&quot;http://127.0.0.1:8085/?module=goagent&amp;amp;menu=deploy&quot;&gt;http://127.0.0.1:8085/?module=goagent&amp;amp;menu=deploy&lt;/a&gt; ，按下图说明操作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/setting1.png&quot; alt=&quot;配置AppID&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/2016/01/setting3.png&quot; alt=&quot;部署AppID&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、如果你成功做到这一步，那么恭喜你，你即将修成正果，只差最后一步。 打开&lt;a href=&quot;http://127.0.0.1:8085/?module=goagent&amp;amp;menu=config&quot;&gt;http://127.0.0.1:8085/?module=goagent&amp;amp;menu=config&lt;/a&gt;，然后老样子看图即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/01/setting2.png&quot; alt=&quot;最后配置&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3、当你点击“保存并重启”的那一刻，你就脱离了苦海，视频畅饮，没有任何限制&lt;/p&gt;

&lt;p&gt;####5、补充说明&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每个GAE应用每天限额流量1G，每个帐号限制12个&lt;/li&gt;
  &lt;li&gt;AppID只影响流量，不影响速度&lt;/li&gt;
  &lt;li&gt;安装好后非特殊情况，别升级！&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 26 Jan 2016 23:52:02 +0800</pubDate>
        <link>http://vanbein.com/posts/tips/fan-qiang</link>
        <guid isPermaLink="true">http://vanbein.com/posts/tips/fan-qiang</guid>
        
        <category>Tip</category>
        
        <category>翻墙</category>
        
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>转 - 为Jekyll文章添加二维码</title>
        <description>&lt;p&gt;看到别人这么做，自己也试了下，确实可以。不过还是用分享按钮里面现成的吧。&lt;/p&gt;

&lt;p&gt;GitHub上有个现成的&lt;a href=&quot;https://github.com/jeromeetienne/jquery-qrcode&quot;&gt;jquery-qrcode.js&lt;/a&gt;，按照里面的说明很容易就能为文章生成一个二维码了。&lt;/p&gt;

&lt;p&gt;首先去GitHub上clone这个js（&lt;a href=&quot;https://github.com/jeromeetienne/jquery-qrcode.git&quot;&gt;https://github.com/jeromeetienne/jquery-qrcode.git&lt;/a&gt;），放到合适的地方，在需要生成二维码的地方引用：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jquery.qrcode.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后创建任意一个元素来包含所生成的二维码图片，比如说一个&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;qrcode&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;qrcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://vanbein.com/posts/jekyll/qr-code-to-post-with-jekyll&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



其中的text部分按照自己需要修改就可以。长宽也可以自定义。这样就可以任意生成二维码了。

jQuery-qrcode的作者有个完整的[示例](https://github.com/jeromeetienne/jquery-qrcode/blob/master/examples/basic.html)，也许更有帮助。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 16 Jan 2016 23:52:02 +0800</pubDate>
        <link>http://vanbein.com/posts/jekyll/qr-code-to-post-with-jekyll</link>
        <guid isPermaLink="true">http://vanbein.com/posts/jekyll/qr-code-to-post-with-jekyll</guid>
        
        <category>Jekyll</category>
        
        <category>QRcode</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>转 - 多说评论框自定义CSS优化</title>
        <description>&lt;p&gt;多说的个性化设置里有个自定义CSS，将你要更改的CSS样式代码粘贴进去保存就好了；注意：有些属性如果修改了没效果的话，要在每个属性后面加上一个&lt;code&gt;!important&lt;/code&gt;，将优先级调为最高就可以看到效果了，比如：&lt;code&gt;padding:10px&lt;/code&gt;; 这个属性没生效的话就要这样改：&lt;code&gt;padding:10px !important&lt;/code&gt;; 这样就可以生效了。&lt;/p&gt;

&lt;p&gt;下面将网络上现有的几个不错的css样式整理并分享给大家。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;圆角（或者圆形）+ 阴影&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;54px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;54px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*设置图像的长和宽*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;27px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*设置图像圆角效果,在这里我直接设置了超过width/2的像素，即为圆形了*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;27px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*圆角效果：兼容webkit浏览器*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-moz-border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;27px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inset&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#3333&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*设置图像阴影效果*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inset&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#3333&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



## 鼠标悬浮时，圆形+图像进行360度旋转


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;54px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;54px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*设置图像的长和宽*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;27px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*设置图像圆角效果,在这里我直接设置了超过width/2的像素，即为圆形了*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;27px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*圆角效果：兼容webkit浏览器*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-moz-border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;27px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inset&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#3333&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*设置图像阴影效果*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inset&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#3333&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.4s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-webkit-transform&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.4s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.4s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*变化时间设置为0.4秒(变化动作即为下面的图像旋转360读）*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-moz-transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-moz-transform&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.4s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*设置鼠标悬浮在头像时的CSS样式*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;rgba(255,255,255,.6),&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;inset&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;rgba(255,255,255,1);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;rgba(255,255,255,.6),&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;inset&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;rgba(255,255,255,1);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;360deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/*图像旋转360度*/&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;360deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-moz-transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;360deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



## 鼠标悬浮时：圆形+图像进行360度旋转+半圆遮盖


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-comments-tabs&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-tab&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#848568&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;text-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#dddfc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-highlight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#848568&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-comments-tabs&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-tab&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-current&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#696a52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#d4d6ba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-highlight&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#696a52&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-hot-posts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-post-self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-post-self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-children&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;26px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-14px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;36px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;36px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;46px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#E5E6D0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-children&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-23px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#b9baa6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#de5a4e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-replybox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-children&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-replybox.ds-inline-replybox&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-replybox.ds-inline-replybox&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-replybox.ds-inline-replybox&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-replybox&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-replybox&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.4s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-in-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;-moz-transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.4s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-in-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;-o-transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.4s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-in-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;-ms-transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.4s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-in-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.4s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-in-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.ds-post-self&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;-webkit-transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;360deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;-moz-transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;360deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;-o-transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;360deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;-ms-transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;360deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;360deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-comment-body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#F0F0E3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;32px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-comment-body&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#787968&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-comments&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-user-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#696A52&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-comments&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-user-name&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#D32&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-hot-posts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-hot-posts&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-gradient-bg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-bubble&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-bubble&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-bubble&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx-bubble&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-bubble&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-bubble&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx-bubble&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;45px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;45px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-bubble&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-user-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-comment-body&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#b9baa6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#e8e8dc&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-entry&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-avatar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-entry&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;46px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-entry&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#787968&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-entry&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#696A52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



简要说明：

配色是非常重要的，特别是记得改「#ds-reset .ds-avatar, #ds-thread #ds-reset ul.ds-children .ds-avatar {background:网站的背景颜色}」。

**用户气泡提示框代码:** 隐藏用户气泡提示框「#ds-thread #ds-reset #ds-bubble {display:none !important}」，这是隐藏鼠标移至用户名称时弹出来的气泡提示框。

**评论盖楼样式代码:** 倒数1-8行。（不用盖楼的评论方式用户可以直接删除这几行，精简一下代码。）

## 多说css自定义代码（用于细微调整）：

### 将评论框底部的分享到微博QQ空间什么的隐藏起来


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.ds-sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*隐藏评论框底部分享*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



### 定义评论框背景图片


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.ds-textarea-wrapper.ds-rounded-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffffff&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(这里添加图片的网址)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*定义评论框背景背景*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



注意图片最好是透明或者白色的，图片的像素大小最好要去你的评论框大小一样，不然可能会出现拉伸。

### 隐藏评论框底部渐变背景


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-gradient-bg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*设置评论框下方渐变*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



话说渐变色什么的虽然立体感较强但是和主题整体风格不融洽，隐藏之，这样底部就是透明的了。

### 定义评论框内字体


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-textarea-wrapper&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;textarea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-textarea-wrapper&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-hidden-text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘微软雅黑’&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Yahei&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;letter-spacing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*定义评论框内字体*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



这个好像是定义评论框内输入的文字字体的。

### 定义发布按钮字体，以及渐变色背景


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-post-button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘微软雅黑’&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Yahei&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#49976b&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*定义发布按钮字体以及渐变背景*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



### 隐藏评论右上方 最热 最新 排序 按钮


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*隐藏最新最热等*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



### 隐藏评论左上方 评论总数背景色及边框


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-tab&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*隐藏评论总数背景及边框*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



### 隐藏底部多说版权


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-powered-by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*隐藏多说底部版权*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



### 定义各种文字高亮颜色，以及浮动窗口的高亮颜色


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-highlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#49976b&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*定义高亮字体颜色*/&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-bubble&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#49976b&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*定义评论框内其他高亮颜色*/&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-bubble&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#49976b&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*定义评论框内其他高亮颜色*/&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-ctx&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-entry&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ds-ctx-head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#49976b&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*定义评论框内其他高亮颜色*/&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-comment-context&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#49976b&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*定义评论框内其他高亮颜色*/&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#ds-thread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#ds-reset&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.ds-comment-context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#49976b&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;/*定义评论框内其他高亮颜色*/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;



### 评论框左右边距

如果你的评论框左右边距过小（评论框太宽），输入下列代码调整宽度，直到页面上评论框宽度显示合适：

```
#ds-thread  {padding:24px;}
```

或

```
#ds-thread {margin:24px;}
```

如果你的评论框太窄，可能是宽度被设定了不合适的值，输入下列代码让宽度自动拉伸：

```
#ds-thread {width:auto;}
```

### 评论框整体的背景色

多说评论会采用主题的背景色作为整体评论框的背景，这样可能导致评论本身不是很显眼。你可以输入下列代码来更改整体评论框的背景颜色：

```
#ds-thread {background: #ffffff;}
```

这个评论背景的边角默认是直角，如果想改成圆角，请输入下列代码（仅在Firefox，Chrome及高版本ie浏览器下有效，ie6,7,8将仍然为直角显示）：

```
#ds-thread{ border-radius: 5px;}
```
注意：其中的#ffffff可以被替换为你希望的颜色，以便于评论文字相适应。

### 高亮字体的颜色

高亮字体包括“n条评论”，“n条微博”，评论者名字的颜色，想修改它的显示颜色（在大多数情况下默认是红色），输入下列代码：

```
#ds-thread #ds-reset .ds-highlight{color: #ffffff !important;}
```

### 更改评论字体颜色

想修改评论正文的字体颜色，请输入下列代码：

```
#ds-thread #ds-reset .ds-comment-body p {color: #ffffff;}
```

当您在修改一部分上面未示例的标签样式时，遇到无效的情况，请尝试增加`!important`。

### 更改最近访客头像大小

想要修改最新访客头像的大小，请输入下列代码：

```
#ds-recent-visitors .ds-avatar img {width: 30px !important;height: 30px !important;}
```

其中30px是宽和高，请根据效果修改不同高度和宽度。

---
📎 **引用来源：**[http://blog.flycmd.com/archives/29](http://blog.flycmd.com/archives/29)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 15 Jan 2016 23:52:02 +0800</pubDate>
        <link>http://vanbein.com/posts/jekyll/duoshuo-css</link>
        <guid isPermaLink="true">http://vanbein.com/posts/jekyll/duoshuo-css</guid>
        
        <category>Jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
