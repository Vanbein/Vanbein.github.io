---
layout: post
title: Method结构, SEL, IMP理解
category: iOS进阶
tags: iOS runtime
image: /images/head-800x400/-43.png
description: 一直在代码中使用@Selector(method:)，但其原理也是有必要去了解的。
homepage: false
toc: true
---

一直在代码中使用@Selector(method:)，但其原理也是有必要去了解的。


### 定义
下面是method相关的定义

{% highlight objc linenos %}
typedef struct objc_method \*Method;
//编译器依据类中定义的方法为该类产生一个或更多这种这种结构.
//一个类的实现可以分散在一个文件中不同部分,同时类别可以分散在不同的模块中.
//为了处理这个问题,使用一个单独的方法链表 
struct objc_method {
    SEL method_name;
    char \*method_types;
    IMP method_imp;
} 
//
struct objc_method_list {
      struct objc_method_list \*obsolete         OBJC2_UNAVAILABLE;
      int method_count                          OBJC2_UNAVAILABLE;
  #ifdef \_\_LP64__
      int space                                 OBJC2_UNAVAILABLE;
  #endif
      /* variable length structure \*/
      struct objc_method method_list[1]         OBJC2_UNAVAILABLE;
 } 
 //
struct objc_method_description {
      SEL name;               /* < The name of the method \*/
      char \*types;            /* < The types of the method arguments */

};
//
struct objc_method_description_list {
      int count;
      struct objc_method_description list[1];
};
{% endhighlight %}

根据结构体`objc_method`可以看出，每个方法有3个属性

+ SEL：selector 的简写,俗称方法选择器,实质存储的是方法的名称，方法名为此方法的签名，有着相同函数名和参数名的方法有着相同的方法名。
+ `char method_types`：描述方法的参数列表. 在运行时注册选择器时使用.那时候方法名就会包含方法的参数列表。
+ IMP：implement 的简写,俗称方法实现,看源码得知它就是一个函数指针，为方法具体实现代码块的地址，可像普通C函数调用一样使用IMP

IMP 和 SEL 的结构如下：

**IMP**
{% highlight objc linenos %}
id (*IMP)(id, SEL, ...)
{% endhighlight %}

**SEL**

{% highlight objc linenos %}
typedef struct objc_selector *SEL;
struct objc_selector
{
  void *sel_id;
  const char *sel_types;
};
{% endhighlight %}

### 发送消息
当一个receiver接收消息时，会触发` objc_msgSend(receiver, SEL op, ...); `，首先去runtime底层代码去查看，这些参数的来源，每一个receiver都是`objc_object`结构体的实例，

{% highlight objc linenos %}
struct objc_objc {
	Class isa  OBJC_ISA_AVAILABILITY;
}
{% endhighlight %}

通过 isa 指针找到当前对象的 class，并在class的 method list中寻找发送的消息, 结构体`objc_method_list`，根据官方文档的说法，这是一个包含了多个` objc_method `的数组，`objc_method 这个结构体中包含了2个重要信息---SEL 和 IMP, receiver接收消息时传的参数是SEL类型，SEL主要用来标注方法的名称，IMP则是方法指针，因为每个方法都有自己的地址，这种方式直接找到方法的地址，效率最高。 这样就完成了消息的发送过程


> 简单来说，当你发送消息时，首先回去找它对应的方法list，找到后就会使用相应的方法。
大致是这样的流程，当然细节也很多
>
1. 它首先找到 SEL 对应的方法实现 IMP。因为不同的类对同一方法可能会有不同的实现，所以找到的方法实现依赖于消息接收者的类型。
>
2. 然后将消息接收者对象(指向消息接收者对象的指针)以及方法中指定的参数传递给方法实现 IMP。
>
3. 最后，将方法实现的返回值作为该函数的返回值返回。




参考文章：

* [method 详解](http://www.jianshu.com/p/d8889f83842f)

* [iOS 中Selector的原理窥探](http://www.jianshu.com/p/12010a3672a8) 


