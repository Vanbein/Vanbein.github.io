---
layout: post
title: Foundation框架基础
category: iOS基础
tags: iOS Objective-C
image: /images/head-800x400/-15.png
description: 介绍Foundation框架中一些常用的类
toc: true
homepage: false
---

Foundation框架中一些常用的类


* 字符串型：
	NSString：不可变字符串
	NSMutableString:可变字符串

* 集合型：

	NSArray：OC不可变数组  
	NSMutableArray：可变数组

	NSSet  
	NSMutableSet

	NSDictiorary  
	NSMutableDictiorary

其它：
	NSDate
	NSObject

### 一、NSString

#####  1）初始化

{% highlight Objective-C linenos %}
NSString *str = @"Hello world!";//创建一个字符串常量
//应尽量少使用以下方式通过使用 alloc 创建一个字符串对象，不推荐使用
NSString *str2 = [[NSString alloc] initWithFormat:@"__%@__",str];
//推荐使用 工厂方法 创建一个字符串，
NSString *str3 = [NSString stringWithFormat:@"__%@__",str];
{% endhighlight %}

##### 2）截取子字符串

获取子字符串,有3种方法

{% highlight Objective-C linenos %}
NSString *subStrTo = [@"HelloWorld" substringToIndex:6];  //从字符串开始到第六个字符        
NSString *subStrFrom = [@"HelloWorld" substringFromIndex:6]; //从第6个字符开始到字符串结束
NSRange range = NSMakeRange(3, 5);  //从第3个字符开始，截取5个字符
NSString *subStrRange = [@"HelloWorld" substringWithRange:range];
{% endhighlight %}

##### 3）分割字符串

将字符串按照指定的字符进行分割

{% highlight objc linenos %}
//这里以.为依据进行分割
NSArray *array = [@"www.baidu.com" componentsSeparatedByString:@"."];
//得到arrry = @[@"www",@"baidu",@"com"];
{% endhighlight %}

##### 4）查找子字符串

{% highlight Objective-C linenos %}
NSRange range = [@"12rasd124" rangeOfString:@"asd"];
if (range.location != NSNotFound) {
     NSString *str = [@"12rasd124" substringWithRange:range];
}
{% endhighlight %}

##### 5）替换子字符串

{% highlight Objective-C linenos %}
NSString *str = [@"asdasd" stringByReplacingOccurrencesOfString:@"asd" withString:@"ok"];
{% endhighlight %}

##### 6）路径相关
{% highlight Objective-C linenos %}
[filepath lastPathComponent];                 //获得文件名
[filepath pathExtension];                     //获得文件扩展名
[filtpaht stringByDeletingLastPathComponent]; //获得文件的所在文件夹路径
[filtpath stringByDeletingPathExtension];     //获得去除扩展名的文件路径
{% endhighlight %}

##### 7）判断字符串是否为空

{% highlight Objective-C linenos %}
if (str.length > 0) //不管str是不是nil都可以这么判断
{% endhighlight %}

##### 8）判断字符串相等

{% highlight Objective-C linenos %}
if ([@"asd" isEqualToString:@"asd"]) {
	//字符串相等   
}
{% endhighlight %}

##### 9）判断字符串大小

比较字符串的大小，返回值 NSComparisonResult 是枚举类型，有三个值，NSOrderedAscending、NSOrderedSame、NSOrderedDescending，分别表示-1，0，1，对应小于、等于、大于

{% highlight Objective-C linenos %}
NSString *stra = @"asd";
NSString *strb = @"dfs";
NSComparisonResult compResult = [stra compare:strb];
switch (compResult) {
    case NSOrderedAscending:
		//stra < strb    
        break;
    case NSOrderedSame:
		//stra = strb
        break;
    case NSOrderedDescending:
		//stra > strb
        break;
    default:
        break;
}
{% endhighlight %}

##### 10）将字符串类型的数据内容转换为相应的数据类型

{% highlight objc linenos %}
NSString *str4 = @"123";
nt num = [str4 intValue];
{% endhighlight %}

##### 11）判断字符串前缀/后缀
{% highlight objc linenos %}
//判断字符串前缀
if ([str3 hasPrefix:@"http://"]){
    NSLog(@"is url");
}else{
	NSLog(@"is not url");
}
//判断字符串后缀
if ([str3 hasSuffix:@".mp3"]){
    NSLog(@"is music");
}else{
    NSLog(@"is not music");
}
{% endhighlight %}

### 二、NSMutableString
* 不可变字符串immutable，不可以对字符串进行增加，删除，改变等操作，NSString 是不可变字符串
* 可变字符串mutable，可对字符串进行增加，删除，改变等操作，NSMutableString 是可变字符串

{% highlight objc linenos %}
NSMutableString *mutableString = [NSMutableString stringWithString:@"www.baidu.com"];
//替换字符串
[mutableString replaceCharactersInRange:NSMakeRange(4, 5) withString:@"changhong"];
//插入字符串
[mutableString insertString:@"http://" atIndex:0];
//删除字符串
[mutableString deleteCharactersInRange:NSMakeRange(0, 7)];
//在字符串后面添加/写入字符串
[mutableString appendString:@"/game"];
{% endhighlight %}

---------

### 三、NSArray

* Obiective-C的`NSArray`只能存放对象类型,不能存放非OC对象，如int，结构体和枚举等。
* 创建后一定要初始化数据
* 数组赋值的时候以nil表示结束，所以数组里面不能存放nil的对象

> null C语言类型的指针为空
> NSNULL 只有在数组中使用，表示一个空的对象
> nil  表示OC对象为空

##### 1）创建数组

{% highlight objc linenos %}
//以下是两种方法创建了一个数组
NSArray *namesArray = @[@"abc",@"123",@"ncs"];
NSArray *array2 = [NSArray arrayWithObjects:@"abc",@"123",@"ios",@"qwer",nil];
{% endhighlight %}

##### 2）获取数组的元素个数

{% highlight objc linenos %}
NSInteger num = array2.count;
NSInteger num_2 = [array2 count];
{% endhighlight %}

##### 3）获取某一个元素
{% highlight objc linenos %}
NSString *temp = [array2 objectAtIndex:3]; //第4个元素
NSString *temp2 = [array2 firstObject]; //第一个元素
NSString *temp3 = [array2 lastObject]; //最后一个元素
{% endhighlight %}

##### 4）获取某个元素所对应的索引值/位置

{% highlight objc linenos %}
NSInteger index = [array2 indexOfObject:@"123"];
{% endhighlight %}

**注意：**
{% highlight objc linenos %}
NSArray *array = [NSArray arrayWithObjects:@"hello",@"123",@"ios",@"123",nil];
NSInteger index = [array2 indexOfObject:@"123"];
//index = 1;
{% endhighlight %}

##### 5）判断数组是否包含某一个对象
{% highlight objc linenos %}
if ([array2 containsObject:@"ncs"]){
	NSLog(@"Contains!");
}else{
	NSLog(@"Not contains!");
}
{% endhighlight %}

##### 6）将数组的所有字符串对象拼接成一个字符串

{% highlight objc linenos %}
NSArray *urlsArray = @[@"www",@"baidu",@"com"];
NSString *url = [urlsArray componentsJoinedByString:@"."]; //用.拼接
{% endhighlight %}

### 四、NSMutableArray
##### 1）创建
创建一个array的方法有很多种：
{% highlight objc linenos %}
NSMutableArray *mArray1 = [NSMutableArray array];//创建并初始化，元素个数不定
NSMutableArray *mArray2 = [NSMutableArray arrayWithCapacity:3];//预留3个元素空间
NSMutableArray *mArray3 = [NSMutableArray arrayWithArray:mArray1];//从另外一个array创建
NSMutableArray *mArray4 = [NSMutableArray arrayWithContentsOfFile:filePath];//从文件路径创建
NSMutableArray *mArray5 = [NSMutableArray arrayWithContentsOfURL:NSURL];//从URL创建
NSMutableArray *mArray6 = [NSMutableArray arrayWithObjects:@"HELLO", @"WORLD", nil];
{% endhighlight %}

##### 2）添加数据
{% highlight objc linenos %}
[mArray addObject:@"hello"];
[mArray addObject:@"world"];
[mArray addObject:@"iOS"];
{% endhighlight %}

##### 3）插入数据，数组元素个数增加

{% highlight objc linenos %}
[mArray insertObject:@"Duang" atIndex:2];
{% endhighlight %}

##### 4）删除对象

{% highlight objc linenos %}
[mArray removeObject:@"Duang"];
[mArray removeObjectAtIndex:2];//删除第3个元素
[mArray removeLastObject];//删除最后一个元素
[mArray removeAllObjects];//清空数组所有元素
{% endhighlight %}

##### 5）替换一个对象

{% highlight objc linenos %}
[mArray replaceObjectAtIndex:1 withObject:@"world"];
{% endhighlight %}

##### 6）遍历array

* for循环

{% highlight objc linenos %}
for(int i = 0; i < mArray.count; i ++){
	NSString *string = [mArray objectAtIndex:i];
	NSLog(@"%@",string);
	if([string isEqualToString:@"iOS"]){
		break;//停止遍历
	}
}
{% endhighlight %}

* 快速枚举

{% highlight objc linenos %}
 for(NSString *string in mArray){
    NSLog(@"%@",string);
    if([string isEqualToString:@"iOS"]){
		break;//停止遍历 break只使用在两种场合，即switch和循环结构中。
	}
 }
{% endhighlight %}

* Block遍历
{% highlight objc linenos %}
// 每遍历到一个元素，就会调用一次block
// 并且当前元素和索引位置当做参数传给block
[mArray enumerateObjectsUsingBlock:^(id obj, NSInteger idx, BOOL *stop){
	NSLog(@"%ld -- %@", idx, obj);
	if(idx == 0){
		*stop = YES; //停止遍历 stop参数用来停止遍历，其值若为YES，则停止。
	}
}]
{% endhighlight %}

--------

### 五、NSDictionary

OC中的NSDictionary：根据key找到value。里面存储的东西都是键值对。

##### 1）创建
{% highlight objc linenos %}
//1.
NSDictionary *mydic = [NSDictionary dictionaryWithObject:@"10086" forKey:@"PhoneNumber"];
//2.前面是值，后面是键
NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                             @"1",@"one",
                             @"2",@"two",
                             nil];
//3.快速创建，前面是键，后面是值，
//注意：快速创建字典是编译器特性，只适用于不可变字典
NSDictionary *dic2 = @{
                       @"age":@"22",
                       @"address":@"chengdu",
                       @"name":@"xiaoming",
                       };
//4.
NSArray *objects = @[@"jack", @"tom", @"rose"];
NSArray *keys = @[@"name1", @"name2", @"name3"];
NSDictionary *newdic = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
{% endhighlight %}

##### 2）访问
{% highlight objc linenos %}
//1. 获取字典所有的keys
NSArray *allKeys = [dic allKeys];
//2. 获取所有的values
NSArray *allValues = [dic allValues];
//3. 获取key对应的object
NSString *value = [dic objectForKey:@"name"];
//4. 获取当前字典中键值对的个数
NSIntger count = dic.count;
//5. 快速访问
NSString *value = dic[@"name"];
{% endhighlight %}

##### 3）遍历
* 字典不允许有相同的key，但可以有相同的value（object）
* 字典是无序的
{% highlight objc linenos %}
//1. for循环
NSArray *allKeys = [dic allKeys];
for(int i = 0; i < dic.count; i ++){
	NSString *key = allKeys[i];
	NSString *value = dic[key];
	NSLog(@"%@ = %@",key, object);
}
//2. 使用block
[dic enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop){
	NSLog(@"%ld -- %@", key, obj);
	if(idx == 0){
		*stop = YES; //停止遍历 stop参数用来停止遍历，其值若为YES，则停止。
	}
}]
{% endhighlight %}

### 六、NSMutableDictionary
##### 1）创建

{% highlight objc linenos %}
NSMutableDictionary *mdic = [NSMutableDictionary dictionary]; //创建一个空的可变字典
NSMutableDictionary *mdic = [NSMutableDictionary dictionaryWithDictionary:0];
//注意不可变字典的快速创建方式不适用于可变字典       
{% endhighlight %}

##### 2）添加键值对

{% highlight objc linenos %}
[mdic setObject:@"4" forKey:@"four"];
[mdic setObject:@"3" forKey:@"three"];
[mdic setObject:@"2" forKey:@"two"];
[mdic setObject:@"1" forKey:@"one"];
{% endhighlight %}

##### 3）更改一个key对应的object

{% highlight objc linenos %}
[mdic setObject:@"two2" forKey:@"two"];
{% endhighlight %}

##### 4）删除
{% highlight objc linenos %}
//删除一个特定键值对
[mdic removeObjectForKey:@"four"];
//删除所有的键值对
[mdic removeAllObjects];
{% endhighlight %}

### 七、NSNumber
* NSNumber可以将基本数据类型包装起来，形成一个对象，这样就可以给其发送消息，装入NSArray中等等。

{% highlight objc linenos %}
//封装
NSNumber *intNumber=[NSNumber numberWithInt：100];
NSNumber *floatNumber=[NSNUmber numberWithFloat:100.00];
//取出
int i = [intNumber intValue]; 
//判断比较
if([intNumber isEqualToNumber:floatNumber]) ....
{% endhighlight %}

* NSNumber继承NSObject ，可以使用比较 compare： isEqual等消息

### 八、NSDate

1. NSDate对象用来表示一个具体的时间点。
2. NSDate是一个类簇，我们所使用的NSDate对象，都是NSDate的私有子类的实体。
3. NSDate存储的是GMT时间，使用的时候会根据 当前应用 指定的 时区 进行时间上的增减，以供计算或显示。

##### 1）获取当前的时间
{% highlight objc linenos %}
NSDate *nowDate = [NSDate date];
{% endhighlight %}

##### 2）设置日期格式
{% highlight objc linenos %}
NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
[formatter setDateFormat :@"yyyy-MM-dd aa:H-mm-ss"];
NSString *dateString = [formatter stringFromDate:nowDate];
//打印格式：2015-11-25 下午:13-32-09
{% endhighlight %}

##### 3）常用的方法

{% highlight objc linenos %}
NSDate *dateFromNow = [NSDate dateWithTimeIntervalSinceNow:60];
NSDate *dateFromAnotherDate = [[NSDate alloc] initWithTimeInterval:60 sinceDate:dateFromNow];
NSTimeInterval timeInterval1 = [now timeIntervalSinceDate:dateFromNow];
NSTimeInterval timeInterval2 = [now timeIntervalSinceNow];
NSDate *distantPast = [NSDate distantPast];   //  可以表示的最早的时间
NSDate *distantFuture = [NSDate distantFuture];  //  可以表示的最远的未来时间
//从String得到Date
NSString *stringDate = @"12/31/9999";
NSDateFormatter *dateFormatter = [[NSDateFormatter alloc]init];
[dateFormatter setDateFormat:@"MM/dd/yyyy"];
NSDate *dateCheck = [dateFormatter dateFromString:stringDate];
//NSLog(@"Date = %@", dateCheck);
Output:
Date = 1999-12-30 16:00:00 +0000
// iOS中用NSDate表示的时间只能在distantPast和distantFuture之间！
{% endhighlight %}


