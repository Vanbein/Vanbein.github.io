---
layout: post
title: 关于CALayer
category: iOS基础
tags: iOS Animation layer
image: /images/head-800x400/-5.png
description: 在iOS中，你能看得见摸得着的东西基本上都是UIView，比如一个按钮、一个文本标签、一个文本输入框、一个图标等等，这些都是UIView。其实UIView之所以能显示在屏幕上，完全是因为它内部的一个图层，在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层
homepage: false
toc: true
---

### 简介

在iOS中，你能看得见摸得着的东西基本上都是UIView，比如一个按钮、一个文本标签、一个文本输入框、一个图标等等，这些都是UIView。

其实UIView之所以能显示在屏幕上，完全是因为它内部的一个图层，在创建UIView对象时，UIView内部会自动创建一个图层(即CALayer对象)，通过UIView的layer属性可以访问这个层

{% highlight objc  %}
@property(nonatomic,readonly,retain) CALayer *layer; 
{% endhighlight %}

当UIView需要显示到屏幕上时，会调用`drawRect:`方法进行绘图，并且会将所有内容绘制在自己的图层上，绘图完毕后，系统会将图层拷贝到屏幕上，于是就完成了UIView的显示

换句话说，UIView本身不具备显示的功能，拥有显示功能的是它内部的图层layer。


* CALayer 的原理很难懂，由于我目前只注重运用，所以就说那些在实际开发中能用到的一些地方。

* 如果要更改 UIView 的 CALayer，要引用：`#import <QuartzCore/QuartzCore.h>`. 在xcode5以后不再需要我们自己导入这个框架，如果是在ios6和xcode4以前，需要手动导入框架

* 下面先推荐两篇文章: 文章 1:[原理介绍的比较详细](http://www.cnblogs.com/uyoug321/archive/2011/01/22.html); 2:[Apple官方文章](https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CALayer_class/index.html)

 
### 为什么说 CALayer 很重要呢：
 
1. 每个UIView 都有 CALayer，即 UIView.layer，同时 UIView是iOS系统中界面元素的基础，所有的界面元素都是继承自它，所以，CALayer 应用很广泛
 
2. CALayer 能够对 UIView 做许多设定，如：阴影、边框、圆角和透明效果等，且这些设定都是很有用的
 
 
### CALayer 的一些重要属性:
 
1). anchorPoint : 称为“定位点”、“锚点”, 决定着CALayer身上的哪个点会在`position`属性所指的位置。以自己的左上角为原点(0, 0)，它的x、y取值范围都是0~1，默认值为（0.5, 0.5）

2). position : 用来设置CALayer在父层中的位置, 以父层的左上角为原点(0, 0)，类似于UIView的center

3). backgroundColor : 图层背景颜色

4). bounds : 图层大小，用于设置CALayer的宽度和高度，不能控制位置

5). frame : 设置layer的大小和位置，不支持隐式动画，所以很少使用，通常用bounds、position和anchorPoint一起用来代替。如果没设置frame，那么添加到这个layer的subLayer不能显示。

6). borderWidth : 边框宽度，很常用

7). boarderColor : 边框颜色 

8). contents : UIView的内容

9). contentsRect : 图层显示内容的大小和位置

10). cornerRadius : 圆角半径

11). doubleSided : 图层背面是否显示，默认YES

12). hidden : 是否隐藏 

13). mask : 图层蒙版

14). masksToBounds : 很重要的属性，可以用此属性来防止子元素大小溢出父元素，如若防止溢出，请设为 YES，默认NO

15). opacity : 透明度，类似于UIView的alpha透明效果

16). shadowColor : 阴影颜色

17). shadowOffset : 阴影偏移量，shadow 在 X 和 Y 轴 上延伸的方向

18). shadowOpacity : 阴影的透明度，默认0，如果设置阴影则必须设置此属性

19). shadowPath : 阴影的形状

20). shadowRadius : 阴影的模糊半径，渐变距离，从外围开始，往里渐变 shadowRadius 距离

21). sublayers : 子图层 

22). sublayerTransform : 子图层渐变

23). transform : 图层形变 

24). contentsScale : [详情戳这儿](http://joeshang.github.io/2015/01/10/understand-contentsscale/) 



为了进一步说明anchorPoint的作用，假设有一个层大小`100*100`，现在中心点位置`（50,50）`，由此可以得出`frame（0,0,100,100）`。上面说过anchorPoint默认为`（0.5,0.5）`，同中心点position重合，此时使用图形描述如图1；当修改anchorPoint为`（0,0）`，此时锚点处于图层左上角，但是中心点poition并不会改变，因此图层会向右下角移动，如图2；然后修改anchorPoint为`（1,1,）`，position还是保持位置不变，锚点处于图层右下角，此时图层如图3。

![position](/images/2016/01/position.png "position描述")

#### 测试代码：

{% highlight objc  %}
- (void)viewDidLoad
{
    [super viewDidLoad];
    //
    UIView *viewSample = [[UIView alloc] init];
    [self.view addSubview:viewSample];
 	//
    viewSample.backgroundColor = [UIColor greenColor];
    viewSample.frame = CGRectMake(100, 100, 400, 400);
  	//
  	//Test 1 阴影 不光需要设置阴影颜色，还应该设置阴影的偏移位和透明度。
    //viewSample.layer.shadowPath = [UIBezierPath bezierPathWithRect:viewSample.bounds].CGPath;
    viewSample.layer.shadowPath = [UIBezierPath bezierPathWithRect:CGRectMake(0, 0, 400, 400)].CGPath;
     //如果设置了超过主图层的部分减掉，则设置阴影不会有显示效果。
    viewSample.layer.masksToBounds = NO;
	//self.customView.clipsToBounds = NO;//这是UI框架中使用的方法
    //设置阴影的偏移量，如果为正数，则代表为往右边偏移，默认(0, -3)
    viewSample.layer.shadowOffset = CGSizeMake(10, 10);
    //模糊半径, 默认是3
    viewSample.layer.shadowRadius = 5;
    //阴影透明度，0-1之间，0表示完全透明, 默认0
    viewSample.layer.shadowOpacity = 0.5; 
    //阴影颜色, 默认为不透明的黑色
    viewSample.layer.shadowColor = [UIColor blackColor].CGColor;
    //
    //Test 2 边框
    viewSample.layer.borderWidth = 2;
    viewSample.layer.borderColor = [[UIColor redColor] CGColor];
    //
    //Test 3 masksToBounds
    UIButton *btn = [[UIButton alloc] initWithFrame:CGRectMake(0,0, 200, 200)];
    btn.backgroundColor = [UIColor lightGrayColor];
    //[viewSample addSubview:btn];
    //viewSample.layer.masksToBounds = true;
    //
    //Test 4 bounds 会改变view的显示大小
    //viewSample.layer.bounds = CGRectMake(200, 200, 500, 500);
 	//
    //Test 5 透明度，默认1，不透明
    viewSample.layer.opacity = 0.5;
    // 
    //Test 6 圆角半径，默认0
    viewSample.layer.cornerRadius = 5;
    //
    //test 7 contents 表示接受内容，在view的图层上添加一个image
    viewSample.layer.contents=(id)[UIImage imageNamed:@"me"].CGImage;
    //viewSample.layer.masksToBounds = YES; 
    //
    //Test 8 layer的位置
    //greenLayer
    CALayer *greenLayer = [CALayer layer];
    [self.view.layer addSublayer:greenLayer];
	//greenLayer.bounds = CGRectMake(200, 400, 150, 150);
    greenLayer.frame = CGRectMake(100, 200, 150, 150); 
    greenLayer.backgroundColor = [UIColor greenColor].CGColor;
    greenLayer.anchorPoint = CGPointZero;
    greenLayer.position = CGPointMake(100, 200);
    //redLayer
    CALayer *redLayer = [CALayer layer];
	//redLayer.bounds = CGRectMake(200, 400, 80, 80);
    redLayer.frame = CGRectMake(20, 40, 80, 80);
    redLayer.backgroundColor = [UIColor redColor].CGColor;
    redLayer.position = CGPointMake(0, 0);
    redLayer.anchorPoint = CGPointZero;
    [greenLayer addSublayer:redLayer];
}
{% endhighlight %}

### UIView 和 CALayer 的选择

可以发现，前面的效果不仅可以通过添加层来实现，还可以通过添加UIView来实现。如显示图片的层可以用一个UIImageView来实现。 既然CALayer和UIView都能实现相同的显示效果，那究竟该选择谁好呢？

其实，对比CALayer，UIView多了一个事件处理的功能。也就是说，**CALayer不能处理用户的触摸事件，而UIView可以**。

所以，在选择的过程中，需要考虑到实际的情况，如果显示出来的东西需要跟用户进行交互的话，用UIView；如果不需要跟用户进行交互，用UIView或者CALayer都可以

当然，CALayer的性能会高一些，因为它少了事件处理的功能，更加轻量级 

注意：

* UIView可以通过`addSubviews`添加子视图，类似地，CALayer也可以通过`addSublayers`添加子图层

* UIView可以通过`subviews`属性访问所有的子视图，类似地，CALayer也可以通过`sublayers`属性访问所有的子层

* UIView可以通过`superview`属性访问父视图，类似地，CALayer也可以通过`superlayer`属性访问父层

* 如果一个控件是另外一个控件的子控件，那么这个控件的layer也是另一个控件的子layer。


### CGColorRef和CGImageRef数据类型

* 简单说明

	* CALayer是定义在QuartzCore框架中的；CGImageRef、CGColorRef两种数据类型是定义在CoreGraphics框架中的；UIColor、UIImage是定义在UIKit框架中的

	* 其次，QuartzCore框架和CoreGraphics框架是可以跨平台使用的，在iOS和Mac OS X上都能使用，但是UIKit只能在iOS中使用

	* 因此，为了保证可移植性，QuartzCore不能使用UIImage、UIColor，只能使用CGImageRef、CGColorRef

	* 不过很多情况下，可以通过UIKit对象的特定方法，得到CoreGraphics对象，比如UIImage的CGImage方法可以返回一个CGImageRef
	
### 隐式动画

#### 简单说明

* 每一个UIView内部都默认关联着一个CALayer，我们可用称这个Layer为Root Layer（根层）

* 所有的非Root Layer，也就是手动创建的CALayer对象，都存在着隐式动画

* 什么是隐式动画？
	* 当对非Root Layer的部分属性进行修改时，默认会自动产生一些动画效果。而这些属性称为Animatable Properties(可动画属性)

 

* 列举几个常见的Animatable Properties：

	* bounds：用于设置CALayer的宽度和高度。修改这个属性会产生缩放动画

	* backgroundColor：用于设置CALayer的背景色。修改这个属性会产生背景色的渐变动画

	* position：用于设置CALayer的位置。修改这个属性会产生平移动画

#### 示例代码
{% highlight objc  %}
- (void)animatableProperty{
    //创建图层
    self.mylayer =[CALayer layer];
    //设置图层属性
    self.mylayer.backgroundColor = [UIColor orangeColor].CGColor;
    self.mylayer.bounds = CGRectMake(0, 0, 80, 50);
    //显示位置
    self.mylayer.position = CGPointMake(100, 350);
    self.mylayer.anchorPoint = CGPointZero;
    self.mylayer.cornerRadius = 20;
    //添加图层
    [self.view.layer addSublayer:self.mylayer];
}
//
//touch事件，点击改变layer属性
- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{
    //想关闭动画，只需在layer的值改变前后加入三行代码
    //[CATransaction begin];
    //[CATransaction setDisableActions:YES];
    //隐式动画
    self.mylayer.bounds=CGRectMake(0, 0, 200, 100);
    self.mylayer.backgroundColor=[UIColor greenColor].CGColor;
    //[CATransaction commit];
}
- (void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event{    
    //隐式动画
    self.mylayer.bounds = CGRectMake(0, 0, 80, 50);
    self.mylayer.backgroundColor = [UIColor orangeColor].CGColor;
}
{% endhighlight %}

* 如何查看CALayer的某个属性是否支持隐式动画？
	* 可以查看头文件，看有没有`Animatable`，如果有则表示支持。
	* 也可以查看官方文档
	

> 附本文代码github地址：[CALayer](https://github.com/Vanbein/CALayer)

* 参考文章： 
	* [IOS CALayer 详解](http://www.cnblogs.com/xunziji/archive/2012/10/30/2746769.html)
	* [iOS开发UI篇—CAlayer层的属性](http://www.cnblogs.com/wendingding/p/3800736.html)
	* [iOS开发之让你的应用“动”起来](http://www.cocoachina.com/ios/20141022/10005.html)

