---
layout: post
title: category--类别
category: iOS基础
tags: iOS Objective-C
image: /images/head-800x400/-29.png
description: 无论一个类设计的多么完美，在未来的需求演进中，都有可能会碰到一些无法预测的情况。那怎么拓展已有的类呢？一般而言，继承和组合是不错的选择，但是在Objective-C 2.0 中又提供了category这个语言特性，可以动态的为已有的类添加新行为，如今category已经遍布于Objective-C代码的各个角落，从Apple官方的framework到各个开源框架，从功能繁琐的大型APP到简单的应用，category无处不在，本文将对category做比较全面的记录整理，以备不时查看。
toc: true
homepage: false
---
本文将对category做比较全面的记录整理

#### 摘要
无论一个类设计的多么完美，在未来的需求演进中，都有可能会碰到一些无法预测的情况。那怎么拓展已有的类呢？一般而言，继承和组合是不错的选择，但是在Objective-C 2.0 中又提供了category这个语言特性，可以动态的为已有的类添加新行为，如今category已经遍布于Objective-C代码的各个角落，从Apple官方的framework到各个开源框架，从功能繁琐的大型APP到简单的应用，category无处不在，本文将对category做比较全面的记录整理，以备不时查看。

### 一、category简介
category是Objective-C 2.0之后添加的语言特性，category的主要作用是**为已经存在的类添加方法**。除此之外，Apple还推荐了category的另外两个使用场景--[传送门](https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/Category.html)：

1. 可以把类的实现分开在几个不同的文件里面。这样做有几个显而易见的好处
	+ 可以减少单个文件的体积 
	+ 可以把不同的功能组织到不同的category里 
	+ 可以由多个开发者共同完成一个类 
	+ 可以按需加载想要的category 等等。
2. 声明私有方法

不过除了apple推荐的使用场景，广大开发者脑洞大开，还衍生出了category的其他几个使用场景：

* 模拟多继承
* 把framework的私有方法公开

##### category主要作用
类别主要有3个作用：

1. 可以将类的实现分散到多个不同文件或多个不同框架中，方便代码管理。也可以对框架提供类的扩展（因为框架类没有源码，不能修改）。
2. 创建对私有方法的前向引用：如果其他类中的方法未实现，在你访问其他类的私有方法时编译器报错这时使用类别，在类别中声明这些方法（不必提供方法实现），编译器就不会再产生警告
3. 向对象添加非正式协议：创建一个NSObject的类别称为“创建一个非正式协议”，因为可以作为任何类的委托对象使用。

### 二、category和extension

extension看起来很像一个匿名的category，但是extension和有名字的category几乎完全是两个东西。 extension在**编译期**决议，它就是类的一部分，在编译期和头文件里的@interface以及实现文件里的@implement一起形成一个完整的类，它伴随类的产生而产生，亦随之一起消亡。extension一般用来隐藏类的私有信息，你必须有一个类的源码才能为一个类添加extension，所以你无法为系统的类比如NSString添加extension。（[详见2](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html)）

但是category则完全不一样，它是在**运行期**决议的。

就category和extension的区别来看，我们可以推导出一个明显的事实，**extension可以添加实例变量，而category是无法添加实例变量的**（因为在运行期，对象的内存布局已经确定，如果添加实例变量就会破坏类的内部布局，这对编译型语言来说是灾难性的）。

### 三、category真面目
我们知道，所有的OC类和对象，在runtime层都是用struct表示的，category也不例外，在runtime层，category用结构体 `category_t`（在 `objc-runtime-new.h`中可以找到此定义）表示，如下：

{% highlight objc  %}
typedef struct category_t {
    const char *name;
    classref_t cls;
    struct method_list_t *instanceMethods;
    struct method_list_t *classMethods;
    struct protocol_list_t *protocols;
    struct property_list_t *instanceProperties;
} category_t;
{% endhighlight %}

可以看出它包含了

1. 类的名字（name），注意这并不是category小括号里写的名字，而是类的名字

2. 类（cls），cls是要扩展的类对象，编译期间这个值是不会有的，在app被runtime加载时才会根据name对应到类对象

3. category中所有给类添加的实例方法的列表（instanceMethods）

4. category中所有添加的类方法的列表（classMethods）

5. category实现的所有协议的列表（protocols）

6. category中添加的所有属性（instanceProperties），这也是category里面可以定义属性的原因，不过这个property不会@synthesize实例变量，一般有需求添加实例变量属性时会采用 `objc_setAssociatedObject`和 `objc_getAssociatedObject`方法绑定方法绑定，不过这种方法生成的与一个普通的实例变量完全是两码事。

### 四、category加载顺序
category的加载时间：在iOS的世界里两个方法：`+(void)load` ，`+(void)initialize`，`load`方法是加载类，说白了就是iOS程序在启动的时候，工程里面的文件都会被加载进去，就是调用的这个方法。而`initialize`方法则是类在第一次调用的时候就会执行这个方法。 所以，category也会被load，但是只有category中的方法被执行的时候，才会调用这个类。也就是说先有类，才会有category。所以category中声明属性，会有警告：你应该声明@dynamic。因为系统不会自动给属性合成getter and setter。But在iOS的runtime中有个好东西，叫键值关联：keyValueAssociated。

##### 示例：
我们通过一个例子来具体说明：首先在category中 按照正常方式，声明一个属性(这里是block)。

{% highlight objc  %}
- (void)setBlock:(handler)block
{
    objc_setAssociatedObject(self, &key, block, OBJC_ASSOCIATION_COPY_NONATOMIC);
    if (block) {
        self.delegate = self;
    }else{
        self.delegate = nil;
    }
}    
- (handler)block
{
    return objc_getAssociatedObject(self, &key);
}
{% endhighlight %}

其中key 是声明的一个变量`static int key`;
`objc_setAssociatedObject(id object, const void key, id value, objc_AssociationPolicy policy)` 给一个对象关联一个键值对。id object就是这个对象，const void key 就是这个key，value 就是key 对应的value，最后这个参数是关联的策略，就像你在声明属性时候用的strong，copy等。其中key是一个常量，所以取了一个static的变量地址，这个一般不会冲突的。

这个跟正常声明的属性完全是两码事，这个只是利用运行时（runtime）利用keyValue给对象附加一个变量,不是真正的属性。对了，使用键值关联，需要用到runtime的头文件。category之所以能够声明属性，是因为category的结构体中有个`const struct _prop_list_t *properties` 这么个东西，所以才可以声明属性。

需要注意的有两点：

1. category的方法没有“完全替换掉”原来类已经有的方法，也就是说如果category和原来类都有methodA，那么category附加完成之后，类的方法列表里会有两个methodA

2. category的方法被放到了新方法列表的前面，而原来类的方法被放到了新方法列表的后面，这也就是我们平常所说的category的方法会“覆盖”掉原来类的同名方法，这是因为运行时在查找方法的时候是顺着方法列表的顺序查找的，它只要一找到对应名字的方法，就会罢休^_^，殊不知后面可能还有一样名字的方法。

3. 上面说到的`@dynamic`是一种动态属性。其getter、setter方法由自己生成，而非系统提供。可以根据消息转发来实现。大致说下吧，OC中调用方法本质是像这个对象发送消息。而消息会转换成objc_msgSend（）这个函数。而最终调用的方法是 本质是selector对应的IMP，就是C里面的函数指针，不同的是这个IMP 含有默认的参数，

{% highlight objc  %}
typedef id (*IMP)(id, SEL, ...);
{% endhighlight %}

可以看到 IMP本质就是函数指针，id 就是self，sel就是_cmd...之后才是我们传进的参数。
关于消息转发，可以参考这篇文章[深入浅出Cocoa消息](http://blog.csdn.net/kesalin/article/details/6689226).


### 五、category实例

##### Step1. 创建项目
启动Xcode -> File -> New -> Project. 然后创建一个 iOS Single View Applciation。这里我们命名为 Categories.

##### Step2. 创建Category
现在来创建一个Category来为NSString添加扩展方法。点击` File -> New -> File `然后选择 `Cocoa Touch Objective-C category`. 这里我们命名为 RemoveNum。记得要从 Category on 下拉框选择 NSString，最后点击Create按钮旁的Next按钮。声明Category扩展的方法。
选择 `NSString+RemoveNums.h`文件。添加以下代码:

{% highlight objc  %}
@interface  NSString (RemoveNums)//分类名放在圆括号中，为`RomoveNums`
- (NSString *)removeNumbersFromString:(NSString *)string;
@end
{% endhighlight %}

实现Category扩展的方法。
接着来到`NSString+RemoveNums.m`文件。添加以下代码,可以看到这个方法实际做的事情就是从整个NSString去除掉所有的数字字符。

{% highlight objc  %}
- (NSString *)removeNumbersFromString:(NSString *)string
{
    NSString *trimmedString = nil;
    NSCharacterSet *numbersSet = [NSCharacterSet characterSetWithCharactersInString:@"0123456789"];
    trimmedString = [string stringByTrimmingCharactersInSet:numbersSet];
    return trimmedString;
}
{% endhighlight %}

##### Step3. 导入Category
在`ViewController.h`文件头部添加以下代码来导入Category

{% highlight objc  %}
#import "NSString+RemoveNums.h"
{% endhighlight %}

##### Step4. 测试Category
在`ViewController.h`文件的viewDidLoad方法中添加以下代码。

{% highlight objc  %}
NSString *stringWithNums = @"ABC 123";
NSLog(@"stringWithNums         --> %@",stringWithNums);
stringWithNums = [stringWithNums removeNumbersFromString:stringWithNums];
NSLog(@"trimmed stringWithNums --> %@",stringWithNums);
{% endhighlight %}

##### Step5. 使用Category的方法
在Xcode的菜单栏点击 Product -> Run，测试过程中，请注意控制台 首先输出的ABC 123，然后被方法去除数字后输出的ABC。


### 六、关于Category的注意事项

* 分类可以覆写该类中的另一个方法，但是通常认为这种做法是拙劣的设计习惯。因为，覆写了一个方法后，再也不能访问原来的方法。如果确实需要覆写方法，正确的选择可能是创建子类。如果要在子类中覆写方法，仍然可以通过向super发送消息来引用父类的方法。因此不必了解要被覆写方法的复杂内容，就能够调用父类的方法，并向子类的方法添加自己的功能。

* 如果喜欢可以拥有许多分类，只要遵守此处指出的规则即可。如果一个方法定义在多个分类中，该语句不会指定使用哪个分类。

* 记住，通过使用分类添加新方法来扩展类不仅会影响这个类，同时也会影响所有他的子类。例如，如果为根对象NSObject添加新方法，就存在潜在的危险性，因为每个人都继承这些新的方法，无论你是否愿意。

* 通过分类为现有类添加新方法可能对你有用，但最好不要增加与该类的原始设计或意图不一致的方法。

* 对象／分类命名对必须是唯一的。但是，在给定的Objective-C名称空间中，只能存在一个NSString Name Utilities分类。



